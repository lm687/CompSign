range_rank <- c(2:20, 50, 100)
number_rows <- length(selected_rows)
deconv <- lapply(range_rank, function(i) {cat("Rank", i, "\n"); NMF::nmf(x=X, rank = i)})
mybic <- function(trio){
n <- trio[1]
RSS <- trio[2]
k <- trio[3]
## https://en.wikipedia.org/wiki/Bayesian_information_criterion#Gaussian_special_case
n*log(RSS/n)+k*log(n)
}
# plot(sapply(1:19, function(i) deconv[[i]]@residuals))
min_bic <- data.frame(n=(range_rank)*number_rows,
RSS=sapply(1:length(deconv), function(i) deconv[[i]]@residuals),
k=range_rank)
plot(apply(min_bic, 1, mybic))
#EMucat <- read.table("/mnt/scratcha/fmlab/morril01/simulate_NMF/in/emu_all_sanger.txt_5_ml_spectra.txt")
#EMuact <- read.table("/mnt/scratcha/fmlab/morril01/simulate_NMF/in/emu_all_sanger.txt_5_assigned.txt")
# original <- read.table("~/Documents/PhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/exomes/tmp/all_exomes.txt",
#                         header = TRUE, sep = '\t', stringsAsFactors = FALSE)
original <- read.table("~/Documents/PhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/exomes/Breast/Breast_exomes_mutational_catalog_96_subs.txt",
header = TRUE, sep = '\t', stringsAsFactors = FALSE)
original
original[1:2,1:2]
rownames(original) <- make.names(original[,1], unique = TRUE); original <- original[,-1]
original[1:2,1:2]
X <- original
range_rank <- c(2:20, 50, 100)
number_rows <- length(selected_rows)
deconv <- lapply(range_rank, function(i) {cat("Rank", i, "\n"); NMF::nmf(x=X, rank = i)})
mybic <- function(trio){
n <- trio[1]
RSS <- trio[2]
k <- trio[3]
## https://en.wikipedia.org/wiki/Bayesian_information_criterion#Gaussian_special_case
n*log(RSS/n)+k*log(n)
}
# plot(sapply(1:19, function(i) deconv[[i]]@residuals))
min_bic <- data.frame(n=(range_rank)*number_rows,
RSS=sapply(1:length(deconv), function(i) deconv[[i]]@residuals),
k=range_rank)
plot(apply(min_bic, 1, mybic))
## same rank as estimated with EMu
## rank <- NMF::nmfEstimateRank(x = X, range = 2:20, verbose = TRUE) why is this so slow?!
#deconv <- NMF::nmf(X, rank = rank)
range_rank <- c(2:20, 50, 100)
number_rows <- length(selected_rows)
deconv <- lapply(range_rank, function(i) {cat("Rank", i, "\n"); NMF::nmf(x=X, rank = i)})
deconv
mybic <- function(trio){
n <- trio[1]
RSS <- trio[2]
k <- trio[3]
## https://en.wikipedia.org/wiki/Bayesian_information_criterion#Gaussian_special_case
n*log(RSS/n)+k*log(n)
}
min_bic <- data.frame(n=(range_rank)*number_rows,
RSS=sapply(1:length(deconv), function(i) deconv[[i]]@residuals),
k=range_rank)
plot(apply(min_bic, 1, mybic))
plot(sapply(1:19, function(i) deconv[[i]]@residuals))
install.packages("devtools")
library(devtools)
install_github("jburos/mutsigNMF")
install.packages("devtools")
library(devtools)
install_github("jburos/bayesNMF")
install.packages("devtools")
###
library(bayesNMF)
library(devtools)
install_github("jburos/bayesNMF")
library(devtools)
install_github("jburos/bayesNMF",ref='trunk'))
library(devtools)
install_github("jburos/bayesNMF",ref='trunk')
library(devtools)
install_github("jburos/bayesNMF",ref='master')
###
library(mutsigNMF)
dim(original)
bayesNMFres <- run_bayesNMF(original)
warnings()
bayesNMFres
bayesNMFres[[10]]$class
matrix(c(0, 1, 1, 1), ncol=2)
matrix(c(0, 1, 1, 1), ncol=2)%*%matrix(c(0, 1, 1, 1), ncol=2)
matrix(c(0, 1, 1, 1), ncol=2)%*%matrix(c(0, 1, 1, 1), ncol=2)%*%matrix(c(0, 1, 1, 1), ncol=2)
bayesNMFres
bayesNMFres[[1]]
bayesNMFres[[11]]
bayesNMFres[[10]]
sapply(bayesNMFres, is.null)
which(!sapply(bayesNMFres, is.null))
bayesNMFres[[which(!sapply(bayesNMFres, is.null))]]
#!/usr/bin/env Rscript
args = commandArgs(trailingOnly=TRUE)
##example of arg: richard_combined_FinalReport1_BT474
number_rows=as.numeric(args[1])
outputname=(args[2])
library(registry, lib.loc = "~/R/x86_64-pc-linux-gnu-library/3.4")
library(pkgmaker, lib.loc = "~/R/x86_64-pc-linux-gnu-library/3.4")
library(rngtools, lib.loc = "~/R/x86_64-pc-linux-gnu-library/3.4")
library(xtable, lib.loc = "~/R/x86_64-pc-linux-gnu-library/3.4")
library(withr, lib.loc = "~/R/x86_64-pc-linux-gnu-library/3.4")
library(magrittr, lib.loc = "~/R/x86_64-pc-linux-gnu-library/3.4")
library(stringr, lib.loc = "~/R/x86_64-pc-linux-gnu-library/3.4")
library(reshape2)
library(ggplot2)
library(NMF)
#EMucat <- read.table("/mnt/scratcha/fmlab/morril01/simulate_NMF/in/emu_all_sanger.txt_5_ml_spectra.txt")
#EMuact <- read.table("/mnt/scratcha/fmlab/morril01/simulate_NMF/in/emu_all_sanger.txt_5_assigned.txt")
original <- read.table("~/Documents/PhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/exomes/tmp/all_exomes.txt",
header = TRUE, sep = '\t', stringsAsFactors = FALSE)
rownames(original) <- make.names(original[,1], unique = TRUE); original <- original[,-1]
selected_rows <- sample(x = (1:nrow(original)), size = number_rows, replace = FALSE)
X <- t(original[selected_rows,])
selected_rows <- 1:1000
X <- t(original[selected_rows,])
## same rank as estimated with EMu
## rank <- NMF::nmfEstimateRank(x = X, range = 2:20, verbose = TRUE) why is this so slow?!
#deconv <- NMF::nmf(X, rank = rank)
range_rank <- c(2:20, 50, 100)
number_rows <- length(selected_rows)
deconv <- lapply(range_rank, function(i) {cat("Rank", i, "\n"); NMF::nmf(x=X, rank = i)})
mybic <- function(trio){
n <- trio[1]
RSS <- trio[2]
k <- trio[3]
## https://en.wikipedia.org/wiki/Bayesian_information_criterion#Gaussian_special_case
n*log(RSS/n)+k*log(n)
}
min_bic <- data.frame(n=(range_rank)*number_rows,
RSS=sapply(1:length(deconv), function(i) deconv[[i]]@residuals),
k=range_rank)
plot(apply(min_bic, 1, mybic))
###
bayesNMFres <- run_bayesNMF(original)
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(MCMCpack)
library(circlize)
#' Compute a coefficient based on D which is used for
#' both compute_z1s() and compute_z2s()
coef_D <- function(D){
sqrt( ((D-1)+sqrt(D*(D-2)))/(2*D) )
}
#' x: compositional vector
#' idx1: index of the first component
#' idx2: index of the second component
compute_zs <- function(x, idx1, idx2){
## equation 13 of Kynclova et al.
.D <- ncol(x)
.notidx <- (1:.D)[!((1:.D) %in% c(idx1, idx2))]
coef <- coef_D(.D)
## exponents
.expnt_a <- 1/((.D-1)+sqrt(.D*(.D-2)))
.expnt_b <- ( sqrt(.D-2)+sqrt(.D) ) / ( sqrt(.D-2)*(.D - 1 + sqrt(.D*(.D-2))) )
## denominator
denom <- ( (x[,idx2]**.expnt_a) * (apply(x[,.notidx], 1, prod))**.expnt_b )
return(coef*log(x[idx1]/denom))
}
computeRho <- function(z1s, z2s){
return(cov(z1s, z2s)/(sqrt(var(z1s)*var(z2s))))
}
#' x: compositional vector
#' computes the matrix of rhos for all pairwise
#' combinations
computeRhoWrapper <- function(x){
.D <- ncol(x)
outer(1:.D, 1:.D, Vectorize(function(i,j){
z1s <- compute_zs(x = x, idx1 = i, idx2 = j)
z2s <- compute_zs(x, j, i)
.computeRho(z1s, z2s)
}))
}
#' Compute rho and plot the heatmap
plotcomputeRho <- function(x, pseudocount = 0, names_sigs, column_title=''){
aa <- computeRhoWrapper(addPseudoCounts(x, pseudocount = pseudocount))
colnames(aa) <- rownames(aa) <- names_sigs
ComplexHeatmap::Heatmap(aa,  col = circlize::colorRamp2(c(min(aa), median(aa), max(aa)), c("#e6cb1f", "white", "#921fe6")),
column_title = column_title)
}
#' Compute clr correlation and plot the heatmap
plotcomputeclrcor <- function(x, pseudocount = 0, names_sigs, column_title=''){
aa <- clr(addPseudoCounts(x, pseudocount = pseudocount))
aa <- matrix(aa, ncol = ncol(x))
aa <- cor(aa)
colnames(aa) <- rownames(aa) <- names_sigs
ComplexHeatmap::Heatmap(aa,  col = circlize::colorRamp2(c(min(aa), median(aa), max(aa)), c("#e6cb1f", "white", "#921fe6")),
column_title = column_title)
}
-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
pdf(file = "~/Desktop/symmetric_balances.pdf")
for(i in list.files("../../CompSign/data", pattern = "*rda", full.names = TRUE)){load(i)}
-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
png(file = "~/Desktop/symmetric_balances.pdf")
##
png(file = "~/Desktop/symmetric_balances.pdf")
for(i in list.files("../../CompSign/data", pattern = "*rda", full.names = TRUE)){load(i)}
dataset <- list(CNA_12K_TCGA=CNA_12K_TCGA,
CNA_12K_TCGA_v2_QP=CNA_12K_TCGA_v2_QP,
CNA_12K_TCGA_v2_YAPSA=CNA_12K_TCGA_v2_YAPSA)
dev.off()
dev.off()
dev.off()
dev.off()
##
pdf(file = "~/Desktop/symmetric_balances.pdf")
for(i in list.files("../../CompSign/data", pattern = "*rda", full.names = TRUE)){load(i)}
dataset <- list(CNA_12K_TCGA=CNA_12K_TCGA,
CNA_12K_TCGA_v2_QP=CNA_12K_TCGA_v2_QP,
CNA_12K_TCGA_v2_YAPSA=CNA_12K_TCGA_v2_YAPSA)
version_dataset <- 'CNA_12K_TCGA_v2_QP'
exposures_tmp <- count_matrix(dataset[[version_dataset]])
plotcomputeRho(x = exposures_tmp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title='CNA TCGA QP dataset - rho') ## why is it all so extremely high?
plotcomputeclrcor(x = exposures_tmp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title='CNA TCGA QP dataset - cor clr')
Ncomp <- 5
Nsamps <- 100
X <- MCMCpack::rdirichlet(Nsamps, rep(1,Ncomp))
plotcomputeRho(X, names_sigs = paste0('S', 1:Ncomp))
plotcomputeclrcor(X, names_sigs = paste0('S', 1:Ncomp))
plotcomputeRho(count_matrix(Breast560), pseudocount = 1e-7,
names_sigs = colnames(count_matrix(Breast560)),
column_title = '560 Breast cancers (Nik-Zainal) - rho')
plotcomputeclrcor(count_matrix(Breast560), pseudocount = 1e-7,
names_sigs = colnames(count_matrix(Breast560)),
column_title = '560 Breast cancers (Nik-Zainal) - cor clr')
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
dev.off()
##' Implementing symmetric balances from
##' Correlation Between Compositional Parts Based on Symmetric Balances
##' Petra Kyncˇlová · Karel Hron · Peter Filzmoser
##'
##' which is a compositional data analysis-like correlation coefficient
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(MCMCpack)
library(circlize)
#' Compute a coefficient based on D which is used for
#' both compute_z1s() and compute_z2s()
coef_D <- function(D){
sqrt( ((D-1)+sqrt(D*(D-2)))/(2*D) )
}
#' x: compositional vector
#' idx1: index of the first component
#' idx2: index of the second component
compute_zs <- function(x, idx1, idx2){
## equation 13 of Kynclova et al.
.D <- ncol(x)
.notidx <- (1:.D)[!((1:.D) %in% c(idx1, idx2))]
coef <- coef_D(.D)
## exponents
.expnt_a <- 1/((.D-1)+sqrt(.D*(.D-2)))
.expnt_b <- ( sqrt(.D-2)+sqrt(.D) ) / ( sqrt(.D-2)*(.D - 1 + sqrt(.D*(.D-2))) )
## denominator
denom <- ( (x[,idx2]**.expnt_a) * (apply(x[,.notidx], 1, prod))**.expnt_b )
return(coef*log(x[idx1]/denom))
}
computeRho <- function(z1s, z2s){
return(cov(z1s, z2s)/(sqrt(var(z1s)*var(z2s))))
}
#' x: compositional vector
#' computes the matrix of rhos for all pairwise
#' combinations
computeRhoWrapper <- function(x){
.D <- ncol(x)
outer(1:.D, 1:.D, Vectorize(function(i,j){
z1s <- compute_zs(x = x, idx1 = i, idx2 = j)
z2s <- compute_zs(x, j, i)
computeRho(z1s, z2s)
}))
}
#' Compute rho and plot the heatmap
plotcomputeRho <- function(x, pseudocount = 0, names_sigs, column_title=''){
aa <- computeRhoWrapper(addPseudoCounts(x, pseudocount = pseudocount))
colnames(aa) <- rownames(aa) <- names_sigs
ComplexHeatmap::Heatmap(aa,  col = circlize::colorRamp2(c(min(aa), median(aa), max(aa)), c("#e6cb1f", "white", "#921fe6")),
column_title = column_title)
}
#' Compute clr correlation and plot the heatmap
plotcomputeclrcor <- function(x, pseudocount = 0, names_sigs, column_title=''){
aa <- clr(addPseudoCounts(x, pseudocount = pseudocount))
aa <- matrix(aa, ncol = ncol(x))
aa <- cor(aa)
colnames(aa) <- rownames(aa) <- names_sigs
ComplexHeatmap::Heatmap(aa,  col = circlize::colorRamp2(c(min(aa), median(aa), max(aa)), c("#e6cb1f", "white", "#921fe6")),
column_title = column_title)
}
##
pdf(file = "~/Desktop/symmetric_balances.pdf")
for(i in list.files("../../CompSign/data", pattern = "*rda", full.names = TRUE)){load(i)}
dataset <- list(CNA_12K_TCGA=CNA_12K_TCGA,
CNA_12K_TCGA_v2_QP=CNA_12K_TCGA_v2_QP,
CNA_12K_TCGA_v2_YAPSA=CNA_12K_TCGA_v2_YAPSA)
version_dataset <- 'CNA_12K_TCGA_v2_QP'
exposures_tmp <- count_matrix(dataset[[version_dataset]])
plotcomputeRho(x = exposures_tmp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title='CNA TCGA QP dataset - rho') ## why is it all so extremely high?
plotcomputeclrcor(x = exposures_tmp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title='CNA TCGA QP dataset - cor clr')
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
Ncomp <- 5
Nsamps <- 100
X <- MCMCpack::rdirichlet(Nsamps, rep(1,Ncomp))
plotcomputeRho(X, names_sigs = paste0('S', 1:Ncomp))
plotcomputeclrcor(X, names_sigs = paste0('S', 1:Ncomp))
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
plotcomputeRho(count_matrix(Breast560), pseudocount = 1e-7,
names_sigs = colnames(count_matrix(Breast560)),
column_title = '560 Breast cancers (Nik-Zainal) - rho')
plotcomputeclrcor(count_matrix(Breast560), pseudocount = 1e-7,
names_sigs = colnames(count_matrix(Breast560)),
column_title = '560 Breast cancers (Nik-Zainal) - cor clr')
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
dev.off()
##' Implementing symmetric balances from
##' Correlation Between Compositional Parts Based on Symmetric Balances
##' Petra Kyncˇlová · Karel Hron · Peter Filzmoser
##'
##' which is a compositional data analysis-like correlation coefficient
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(MCMCpack)
library(circlize)
#' Compute a coefficient based on D which is used for
#' both compute_z1s() and compute_z2s()
coef_D <- function(D){
sqrt( ((D-1)+sqrt(D*(D-2)))/(2*D) )
}
#' x: compositional vector
#' idx1: index of the first component
#' idx2: index of the second component
compute_zs <- function(x, idx1, idx2){
## equation 13 of Kynclova et al.
.D <- ncol(x)
.notidx <- (1:.D)[!((1:.D) %in% c(idx1, idx2))]
coef <- coef_D(.D)
## exponents
.expnt_a <- 1/((.D-1)+sqrt(.D*(.D-2)))
.expnt_b <- ( sqrt(.D-2)+sqrt(.D) ) / ( sqrt(.D-2)*(.D - 1 + sqrt(.D*(.D-2))) )
## denominator
denom <- ( (x[,idx2]**.expnt_a) * (apply(x[,.notidx], 1, prod))**.expnt_b )
return(coef*log(x[idx1]/denom))
}
computeRho <- function(z1s, z2s){
return(cov(z1s, z2s)/(sqrt(var(z1s)*var(z2s))))
}
#' x: compositional vector
#' computes the matrix of rhos for all pairwise
#' combinations
computeRhoWrapper <- function(x){
.D <- ncol(x)
outer(1:.D, 1:.D, Vectorize(function(i,j){
z1s <- compute_zs(x = x, idx1 = i, idx2 = j)
z2s <- compute_zs(x, j, i)
computeRho(z1s, z2s)
}))
}
#' Compute rho and plot the heatmap
plotcomputeRho <- function(x, pseudocount = 0, names_sigs, column_title=''){
aa <- computeRhoWrapper(addPseudoCounts(x, pseudocount = pseudocount))
colnames(aa) <- rownames(aa) <- names_sigs
ComplexHeatmap::Heatmap(aa,  col = circlize::colorRamp2(c(min(aa), median(aa), max(aa)), c("#e6cb1f", "white", "#921fe6")),
column_title = column_title)
}
#' Compute clr correlation and plot the heatmap
plotcomputeclrcor <- function(x, pseudocount = 0, names_sigs, column_title=''){
aa <- clr(addPseudoCounts(x, pseudocount = pseudocount))
aa <- matrix(aa, ncol = ncol(x))
aa <- cor(aa)
colnames(aa) <- rownames(aa) <- names_sigs
ComplexHeatmap::Heatmap(aa,  col = circlize::colorRamp2(c(min(aa), median(aa), max(aa)), c("#e6cb1f", "white", "#921fe6")),
column_title = column_title)
}
##
pdf(file = "~/Desktop/symmetric_balances.pdf")
for(i in list.files("../../CompSign/data", pattern = "*rda", full.names = TRUE)){load(i)}
dataset <- list(CNA_12K_TCGA=CNA_12K_TCGA,
CNA_12K_TCGA_v2_QP=CNA_12K_TCGA_v2_QP,
CNA_12K_TCGA_v2_YAPSA=CNA_12K_TCGA_v2_YAPSA)
version_dataset <- 'CNA_12K_TCGA_v2_QP'
exposures_tmp <- count_matrix(dataset[[version_dataset]])
print(plotcomputeRho(x = exposures_tmp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title='CNA TCGA QP dataset - rho')) ## why is it all so extremely high?
print(plotcomputeclrcor(x = exposures_tmp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title='CNA TCGA QP dataset - cor clr'))
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
Ncomp <- 5
Nsamps <- 100
X <- MCMCpack::rdirichlet(Nsamps, rep(1,Ncomp))
print(plotcomputeRho(X, names_sigs = paste0('S', 1:Ncomp)))
print(plotcomputeclrcor(X, names_sigs = paste0('S', 1:Ncomp)))
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
print(plotcomputeRho(count_matrix(Breast560), pseudocount = 1e-7,
names_sigs = colnames(count_matrix(Breast560)),
column_title = '560 Breast cancers (Nik-Zainal) - rho'))
print(plotcomputeclrcor(count_matrix(Breast560), pseudocount = 1e-7,
names_sigs = colnames(count_matrix(Breast560)),
column_title = '560 Breast cancers (Nik-Zainal) - cor clr'))
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
dev.off()
print(plotcomputeRho(X, names_sigs = paste0('S', 1:Ncomp)),
column_title='CNA TCGA QP dataset - rho')
print(plotcomputeRho(X, names_sigs = paste0('S', 1:Ncomp)),
column_title='CNA TCGA QP dataset - rho')
print(plotcomputeRho(X, names_sigs = paste0('S', 1:Ncomp),
column_title='CNA TCGA QP dataset - rho'))
print(plotcomputeclrcor(X, names_sigs = paste0('S', 1:Ncomp),
column_title='CNA TCGA QP dataset - cor clr'))
##' Implementing symmetric balances from
##' Correlation Between Compositional Parts Based on Symmetric Balances
##' Petra Kyncˇlová · Karel Hron · Peter Filzmoser
##'
##' which is a compositional data analysis-like correlation coefficient
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(MCMCpack)
library(circlize)
library(compositions)
#' Compute a coefficient based on D which is used for
#' both compute_z1s() and compute_z2s()
coef_D <- function(D){
sqrt( ((D-1)+sqrt(D*(D-2)))/(2*D) )
}
#' x: compositional vector
#' idx1: index of the first component
#' idx2: index of the second component
compute_zs <- function(x, idx1, idx2){
## equation 13 of Kynclova et al.
.D <- ncol(x)
.notidx <- (1:.D)[!((1:.D) %in% c(idx1, idx2))]
coef <- coef_D(.D)
## exponents
.expnt_a <- 1/((.D-1)+sqrt(.D*(.D-2)))
.expnt_b <- ( sqrt(.D-2)+sqrt(.D) ) / ( sqrt(.D-2)*(.D - 1 + sqrt(.D*(.D-2))) )
## denominator
denom <- ( (x[,idx2]**.expnt_a) * (apply(x[,.notidx], 1, prod))**.expnt_b )
return(coef*log(x[idx1]/denom))
}
computeRho <- function(z1s, z2s){
return(cov(z1s, z2s)/(sqrt(var(z1s)*var(z2s))))
}
#' x: compositional vector
#' computes the matrix of rhos for all pairwise
#' combinations
computeRhoWrapper <- function(x){
.D <- ncol(x)
outer(1:.D, 1:.D, Vectorize(function(i,j){
z1s <- compute_zs(x = x, idx1 = i, idx2 = j)
z2s <- compute_zs(x, j, i)
computeRho(z1s, z2s)
}))
}
#' Compute rho and plot the heatmap
plotcomputeRho <- function(x, pseudocount = 0, names_sigs, column_title=''){
aa <- computeRhoWrapper(addPseudoCounts(x, pseudocount = pseudocount))
colnames(aa) <- rownames(aa) <- names_sigs
ComplexHeatmap::Heatmap(aa,  col = circlize::colorRamp2(c(min(aa), median(aa), max(aa)), c("#e6cb1f", "white", "#921fe6")),
column_title = column_title)
}
#' Compute clr correlation and plot the heatmap
plotcomputeclrcor <- function(x, pseudocount = 0, names_sigs, column_title=''){
aa <- compositions::clr(addPseudoCounts(x, pseudocount = pseudocount))
aa <- matrix(aa, ncol = ncol(x))
aa <- cor(aa)
colnames(aa) <- rownames(aa) <- names_sigs
ComplexHeatmap::Heatmap(aa,  col = circlize::colorRamp2(c(min(aa), median(aa), max(aa)), c("#e6cb1f", "white", "#921fe6")),
column_title = column_title)
}
##
pdf(file = "~/Desktop/symmetric_balances.pdf")
for(i in list.files("../../CompSign/data", pattern = "*rda", full.names = TRUE)){load(i)}
dataset <- list(CNA_12K_TCGA=CNA_12K_TCGA,
CNA_12K_TCGA_v2_QP=CNA_12K_TCGA_v2_QP,
CNA_12K_TCGA_v2_YAPSA=CNA_12K_TCGA_v2_YAPSA)
version_dataset <- 'CNA_12K_TCGA_v2_QP'
exposures_tmp <- count_matrix(dataset[[version_dataset]])
print(plotcomputeRho(x = exposures_tmp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title='CNA TCGA QP dataset - rho')) ## why is it all so extremely high?
print(plotcomputeclrcor(x = exposures_tmp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title='CNA TCGA QP dataset - cor clr'))
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
Ncomp <- 5
Nsamps <- 100
X <- MCMCpack::rdirichlet(Nsamps, rep(1,Ncomp))
print(plotcomputeRho(X, names_sigs = paste0('S', 1:Ncomp),
column_title='CNA TCGA QP dataset - rho'))
print(plotcomputeclrcor(X, names_sigs = paste0('S', 1:Ncomp),
column_title='CNA TCGA QP dataset - cor clr'))
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
print(plotcomputeRho(count_matrix(Breast560), pseudocount = 1e-7,
names_sigs = colnames(count_matrix(Breast560)),
column_title = '560 Breast cancers (Nik-Zainal) - rho'))
print(plotcomputeclrcor(count_matrix(Breast560), pseudocount = 1e-7,
names_sigs = colnames(count_matrix(Breast560)),
column_title = '560 Breast cancers (Nik-Zainal) - cor clr'))
#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#-#
dev.off()
