alr_exposures_7 <- compositions::alr(exposures_tmp, ivar = 7)
pairs(alr_exposures_7, pch=19, col=alpha('black', 0.2))
plot(alr_exposures_7[,c(3,5)], pch=19, col=alpha('black', 0.01))
clean <- function(m){m[!apply(m, 1, function(x) any(c(is.nan(x), is.na(x), is.infinite(x)))),]}
clean_exposures_tmp <- clean(exposures_tmp)
alr_exposures_7_tofit <- clean(alr_exposures_7)
fit_lm <- lm(alr_exposures_7_tofit[,5]~alr_exposures_7_tofit[,3])
bool_resid <- abs(resid(fit_lm)) < 0.4
plot(alr_exposures_7_tofit[bool_resid,3],
alr_exposures_7_tofit[bool_resid,5],
pch=19, col=alpha('black', 1))
pairs(alr_exposures_7[names(which(bool_resid)),], pch=19, col=alpha('black', 0.1),
main='The samples for which S3 and S5 are not correlated have all types of exposures')
}else{
warning('ALR analysis not implemented yet for this dataset')
}
ggthemr('flat')
if(major_version_dataset == 'pancancer_OVsignatures'){
filename_out <- paste0("../../../../results/real/CNA12kTCGA/barplots_exposures_", major_version_dataset, ".pdf")
pdf(filename_out, width = 9, height = 3)
for(cancer_types in names(exposures_tmp_project_all$CNA_12K_TCGA)){
x <- createBarplot(exposures_tmp_project_all$CNA_12K_TCGA[[cancer_types]],
order_labels = rownames(exposures_tmp_project_all$CNA_12K_TCGA[[cancer_types]])[order(exposures_tmp_project_all$CNA_12K_TCGA[[cancer_types]][,1])],
remove_labels = TRUE)+
ggtitle(paste0('Original segmentation\nN samples:',
nrow(exposures_tmp_project_all$CNA_12K_TCGA[[cancer_types]])))
y <- createBarplot(exposures_tmp_project_all$CNA_12K_TCGA_v2_QP[[cancer_types]],
order_labels = rownames(exposures_tmp_project_all$CNA_12K_TCGA_v2_QP[[cancer_types]])[order(exposures_tmp_project_all$CNA_12K_TCGA_v2_QP[[cancer_types]][,1])],
remove_labels = TRUE)+
ggtitle('New segmentation\n QP fitting')
z <- createBarplot(exposures_tmp_project_all$CNA_12K_TCGA_v2_YAPSA[[cancer_types]],
order_labels = rownames(exposures_tmp_project_all$CNA_12K_TCGA_v2_YAPSA[[cancer_types]])[order(exposures_tmp_project_all$CNA_12K_TCGA_v2_YAPSA[[cancer_types]][,1])],
remove_labels = TRUE)+
ggtitle('New segmentation\nYAPSA fitting')
grid.arrange(x,y,z, ncol=3, top=gsub('TCGA-', '', cancer_types))
}
dev.off()
}else if(major_version_dataset == 'pancancer_pancancersignatures'){
filename_out <- paste0("../../../../results/real/CNA_PC_TCGA/barplots_exposures_", major_version_dataset, ".pdf")
pdf(filename_out, width = 9, height = 5)
for(cancer_types in names(exposures_tmp_project_all)){
x <- createBarplot(matrix_exposures = exposures_tmp_project_all[[cancer_types]], angle_rotation_axis = 1,
order_labels = (rownames(exposures_tmp_project_all[[cancer_types]])[as.numeric(order(exposures_tmp_project_all[[cancer_types]][,'W2']))]),
levels_signatures = colnames(exposures_tmp_project_all[[cancer_types]]),
remove_labels = TRUE)+
ggtitle('Exposures of Pan-cancer signatures')
grid.arrange(x, top=gsub('TCGA-', '', cancer_types))
}
dev.off()
}
cat('File saved in', filename_out, '\n')
if(major_version_dataset == 'pancancer_OVsignatures'){
## same but without signature 1
order_by <- 4
pdf("../../../../results/real/CNA12kTCGA/barplots_exposures_nosig1.pdf", width = 9, height = 3)
for(cancer_types in names(exposures_tmp_project_all$CNA_12K_TCGA)){
x <- createBarplot(remove_some_signature(exposures_tmp_project_all$CNA_12K_TCGA[[cancer_types]]),
order_labels = rownames(remove_some_signature(exposures_tmp_project_all$CNA_12K_TCGA[[cancer_types]]))[order(remove_some_signature(exposures_tmp_project_all$CNA_12K_TCGA[[cancer_types]])[,order_by])],
remove_labels = TRUE)+
ggtitle(paste0('Original segmentation\nN samples:',
nrow(exposures_tmp_project_all$CNA_12K_TCGA[[cancer_types]])))
y <- createBarplot(remove_some_signature(exposures_tmp_project_all$CNA_12K_TCGA_v2_QP[[cancer_types]]),
order_labels = rownames(remove_some_signature(exposures_tmp_project_all$CNA_12K_TCGA_v2_QP[[cancer_types]]))[order(remove_some_signature(exposures_tmp_project_all$CNA_12K_TCGA_v2_QP[[cancer_types]])[,order_by])],
remove_labels = TRUE)+
ggtitle('New segmentation\n QP fitting')
z <- createBarplot(remove_some_signature(exposures_tmp_project_all$CNA_12K_TCGA_v2_YAPSA[[cancer_types]]),
order_labels = rownames(remove_some_signature(exposures_tmp_project_all$CNA_12K_TCGA_v2_YAPSA[[cancer_types]]))[order(remove_some_signature(exposures_tmp_project_all$CNA_12K_TCGA_v2_YAPSA[[cancer_types]])[,order_by])],
remove_labels = TRUE)+
ggtitle('New segmentation\nYAPSA fitting')
grid.arrange(x,y,z, ncol=3, top=gsub('TCGA-', '', cancer_types))
}
dev.off()
## case in which 3 and 5 are random
ggthemr('light')
THCGA <- list()
for(rem in c(list('None'), as.list(1:7))){
if(rem != 1){
order_by <- 's5'
}else{
order_by <- 's3'
}
order__special_case <- rownames(remove_some_signature(exposures_tmp_project_all$CNA_12K_TCGA[['TCGA-THCA']]))[order(remove_some_signature(exposures_tmp_project_all$CNA_12K_TCGA[['TCGA-THCA']])[,order_by])]
THCGA[[paste0('Removing', rem)]] <- createBarplot(matrix_exposures = remove_some_signature(exposures_tmp_project_all$CNA_12K_TCGA[['TCGA-THCA']],
which_sig = rem),
order_labels = order__special_case,
remove_labels = TRUE, levels_signatures=paste0('s', 1:7))+
ggtitle(paste0('Original segmentation\nN samples:',
nrow(exposures_tmp_project_all$CNA_12K_TCGA[['TCGA-THCA']]), '\nremove: ', rem))
}
pdf("~/Desktop/removing_sigs.pdf", width=9, height = 9)
do.call("grid.arrange", c(THCGA, ncol=3))
dev.off()
}
## pca of ilr
ilr_all <- lapply(exposures_tmp_all, ilr)
names(ilr_all)
concat_ilr_all <- do.call('rbind', ilr_all)
meta_ilr_all_concat0 <- sapply(exposures_tmp_project_all, function(x) sapply(x, nrow))
meta_ilr_all_concat <- cbind.data.frame(version=rep(colnames(meta_ilr_all_concat0),
colSums(meta_ilr_all_concat0)),
cancer_type=unlist(apply(meta_ilr_all_concat0, 2, function(x) rep(rownames(meta_ilr_all_concat0), x))))
concat_ilr_all[10923,] ## all zeroes. how did this even happen? one exposure is 1?
idx_rm <- apply(concat_ilr_all, 1, function(x) all(x==0))
concat_ilr_all <- concat_ilr_all[!idx_rm,]
meta_ilr_all_concat <- meta_ilr_all_concat[!idx_rm,]
pdf("../../../../results/real/CNA12kTCGA/v2_comparison/PCA_ilr_versions.pdf")
plotPCA(concat_ilr_all, groups = meta_ilr_all_concat$version)+
geom_point(alpha=0.2, shape=10)
dev.off()
plotPCA(concat_ilr_all, groups = meta_ilr_all_concat$cancer_type)
createBarplot(exposures_tmp_project[['UVM']], order_labels = rownames(exposures_tmp_project[['UVM']])[order(exposures_tmp_project[['UVM']][,1])])
createBarplot(remove_some_signature(exposures_tmp_project[['UVM']], which_sig = 1),
order_labels = rownames(exposures_tmp_project[['UVM']])[order(exposures_tmp_project[['UVM']][,7])])
## all ternary plots
dev.off()
totvar_cancertype <- function(name_cancer, dataset, pseudoc=1e-7){
outer(1:7, 1:7, Vectorize(function(X,Y){
if(pseudoc > 0){
var(log(addPseudoCounts(dataset[[name_cancer]], pseudoc)[,X]/addPseudoCounts(dataset[[name_cancer]], pseudoc)[,Y]),
na.rm = TRUE)
}else{
selection_positive <- apply(dataset[[name_cancer]][,c(X,Y)], 1, function(x) (x[1] != 0) & (x[2] != 0))
if(sum(selection_positive) == 0){
return(NULL)
}else{
selection_positive <- dataset[[name_cancer]][selection_positive,c(X,Y)]
if(length(selection_positive) == 2){ ##one row
var(log(selection_positive[1]/selection_positive[2]),
na.rm = TRUE)
}else{
var(log(selection_positive[,1]/selection_positive[,2]),
na.rm = TRUE)
}
}
}
}))
}
## do this for the other two datasets too
par(ask=FALSE)
totvars_list_noPC <- lapply(exposures_tmp_project_all, function(dataset) lapply(names(dataset), totvar_cancertype, dataset=dataset, pseudoc=0))
totvars_list <- lapply(exposures_tmp_project_all, function(dataset) lapply(names(dataset), totvar_cancertype, dataset=dataset))
##?! 49 cancer types!?
#sapply(vars_totvars, length)
sapply(totvars_list, length)
par(mfrow=c(1,3))
image.plot(totvars_list[[1]][[1]])
image.plot(totvars_list[[2]][[1]])
image.plot(totvars_list[[3]][[1]])
### save the total variation!
#png("~/Desktop/TV.png")
ict <- 1
pdf("~/Desktop/TV.pdf", height=3)
for(i in names(exposures_tmp_project_all[[1]])){
grid.newpage()
pushViewport(viewport(layout = grid.layout(nr = 1, nc = length(totvars_list))))
pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 1))
draw(Heatmap(totvars_list[[1]][[ict]], cluster_rows = FALSE, cluster_columns = FALSE,
column_title = paste0(i, '\n ', names(totvars_list)[1]), show_heatmap_legend = FALSE), newpage = FALSE)
upViewport()
pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 2))
draw(Heatmap(totvars_list[[2]][[ict]], cluster_rows = FALSE, cluster_columns = FALSE, heatmap_legend_param = list(column_title_gp = gpar(fontsize = 6)),
column_title = paste0(i, '\n ', names(totvars_list)[2]), show_heatmap_legend = FALSE), newpage = FALSE)
upViewport()
pushViewport(viewport(layout.pos.row = 1, layout.pos.col = 3))
draw(Heatmap(totvars_list[[3]][[ict]], cluster_rows = FALSE, cluster_columns = FALSE,
column_title = paste0(i, '\n ', names(totvars_list)[3]), show_heatmap_legend = FALSE), newpage = FALSE)
upViewport()
ict <- ict + 1
}
dev.off()
### this below is redundant
totvars_list_original <- totvars_list
totvars_unlisted <- lapply(totvars_list, as.vector)
vars_totvars <- lapply(totvars_list, function(x) Reduce('var', x))
sums_totvars <- Reduce('+', totvars_list)
image.plot(vars_totvars)
image.plot(sums_totvars)
names(totvars_unlisted) <- names(totvars_list) <- names(exposures_tmp_project)
totvars_list <- melt(totvars_list)
head(totvars_list)
ggplot( cbind.data.frame(melt(totvars_unlisted),
x=rep(1:49)),
aes(x=x, y=value, fill=L1, col=L1))+ geom_bar(stat='identity')
pheatmap(exposures_tmp_project[[1]])
totvars_list_subset <- totvars_list[totvars_list$Var1 == 1 & totvars_list$Var2 == 2,]
ggplot(totvars_list_subset, aes(x=L1, y=value))+
geom_bar(stat = 'identity')
## Tot var for the several versions
total_var_versions <- lapply(c(list(exposures_tmp),
exposures_tmp_all),
function(dataset){
outer(1:7, 1:7, Vectorize(function(X,Y){
var(log(addPseudoCounts(dataset, 1e-7)[,X],
addPseudoCounts(dataset, 1e-7)[,Y]),
na.rm = TRUE)
}))
})
exposures_tmp_all
var(log(ad))
var(log(addPseudoCounts(exposures_tmp_all[[1]], 1e-7)[,1],
addPseudoCounts(exposures_tmp_all[[1]], 1e-7)[,1]))
par(mfrow=c(1,4))
image.plot(total_var_versions[[1]])
image.plot(total_var_versions[[2]])
image.plot(total_var_versions[[3]])
image.plot(total_var_versions[[4]])
for(i in names(exposures_tmp_project)){
plotPCA(ilr(acomp(exposures_tmp_project[[i]])),
main=paste0('PCA of ilr of ', i))
}
dev.off()
dev.off()
dev.off()
for(i in names(exposures_tmp_project)){
plotPCA(ilr(acomp(exposures_tmp_project[[i]])),
main=paste0('PCA of ilr of ', i))
}
#' I look at the three most frequent signatures: 1,3 and 5.
#' Not much information is lost:
hist(1-rowSums(exposures_tmp_project[['UVM']][,c(1,3,5)]), breaks=100)
plot(acomp(exposures_tmp_project[['UVM']][,c(1,3,5)]))
#' ilr is pretty much one-dimensional: does that mean that the three are
#' actually just representative of a single trend?
plot(ilr(acomp(exposures_tmp_project[['UVM']][,c(1,3,5)])))
## which ilr explains the most data?
plot(density(ilr(exposures_tmp_project[['UVM']])[,1]))
plot(density(ilr(exposures_tmp_project[['UVM']])[,2]))
plot(density(ilr(exposures_tmp_project[['UVM']])[,3]))
image.plot(exposures_tmp_project[['UVM']][,c(3, 7)]) ## only one sample in which they coincide (>0)
## sequentially find best ilr?
ilr(acomp(exposures_tmp_project[['UVM']]), V = c(-1, rep(1, 6)))
prcomp(ilr(exposures_tmp_project[['UVM']]))$sdev
compute_overlap_number_of_zeros <- function(exposures_twodim, what_to_return='p.value'){
#' exposures_twodim is a two-column matrix
require(caret)
bool_s1 <- factor(exposures_twodim[,1] == 0, levels=c(TRUE,FALSE))
bool_s2 <- factor(exposures_twodim[,2] == 0, levels=c(TRUE,FALSE))
confusion <- confusionMatrix(bool_s1, bool_s2)$table
if(what_to_return == 'fraction_overlap'){
sum(diag(confusion))/sum(confusion)
}else{
chisq.test(confusion)[what_to_return]
}
}
compute_jaccard <- function(exposures_twodim, what_to_return='statistic'){
# https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0187132
bool_s1 <- factor(exposures_twodim[,1] == 0, levels=c(TRUE,FALSE))
bool_s2 <- factor(exposures_twodim[,2] == 0, levels=c(TRUE,FALSE))
confusion <- confusionMatrix(bool_s1, bool_s2)$table
if(what_to_return == 'statistic'){
confusion['TRUE', 'TRUE']/sum(confusion['TRUE', 'TRUE'], confusion['TRUE', 'FALSE'], confusion['FALSE', 'TRUE'])
}else{
stop("Not implemented yet")
}
}
compute_pearson <- function(exposures_twodim, what_to_return='statistic'){
# https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0187132
bool_s1 <- factor(exposures_twodim[,1] == 0, levels=c(TRUE,FALSE))
bool_s2 <- factor(exposures_twodim[,2] == 0, levels=c(TRUE,FALSE))
confusion <- confusionMatrix(bool_s1, bool_s2)$table
if(what_to_return == 'statistic'){
a <- confusion['TRUE', 'TRUE']
b <- confusion['TRUE', 'FALSE']
c <- confusion['FALSE', 'TRUE']
d <- confusion['FALSE', 'FALSE']
.tmp_log <- log(a+b)+log(c+d)+log(a+c)+log(b+d)
(a*d-b*c)-sqrt( exp(.tmp_log) ) ## any way of logging that?
}else{
stop("Not implemented yet")
}
}
compute_binary_measure <- function(method){ ## "co_oc", "jaccard", "pearson"
.tmp_list_res <- list()
for(i in 1:length(exposures_tmp_project_all)){
cat(names(exposures_tmp_project_all)[i], '\n')
.tmp_list_res[[i]] <- lapply(names(exposures_tmp_project_all[[i]]), function(cancer_type){
.statistic_within_cancer_type <- outer(1:7, 1:7, Vectorize(function(X,Y){
if(method=='co_oc'){
compute_overlap_number_of_zeros(exposures_tmp_project_all[[i]][[cancer_type]][,c(X,Y)],
what_to_return='fraction_overlap')
}else if(method=='jaccard'){
compute_jaccard(exposures_tmp_project_all[[i]][[cancer_type]][,c(X,Y)],
what_to_return='statistic')
}else if(method=='pearson'){
compute_pearson(exposures_tmp_project_all[[i]][[cancer_type]][,c(X,Y)],
what_to_return='statistic')
}
}))
rownames(.statistic_within_cancer_type) <- colnames(.statistic_within_cancer_type) <- paste0('S', 1:7)
.statistic_within_cancer_type
})
names(.tmp_list_res[[i]]) <- names(exposures_tmp_project_all[[i]])
}
.tmp_list_res
}
co_oc_zeroes_fraction_overlap <- compute_binary_measure("co_oc")
jaccard <- compute_binary_measure("jaccard")
pearson <- compute_binary_measure("pearson")
pearson
jaccard
## compare and two measures
comparison_two_lists_of_matrices <- function(list_of_matrices_1, list_of_matrices_2){
lapply(1:3, function(i) {
.names_pairwise0 <- outer(paste0('S', 1:7), paste0('S', 1:7), Vectorize(function(X,Y) paste(c(X,Y), collapse='-')))
names_pairwise <- as.vector(sapply(rep(list(.names_pairwise0), length(list_of_matrices_1[[i]])),
FUN = function(y) as.vector(y)))
list_of_matrices_1_a <- sapply(list_of_matrices_1[[i]], FUN = function(y)  as.vector(y))
list_of_matrices_1_a <- apply(list_of_matrices_1_a, 1, function(x){.tmp_null <- sapply(x, is.null); x[.tmp_null] <- NA; unlist(x)})
list_of_matrices_1_a <- as.vector(unlist(list_of_matrices_1_a))
list_of_matrices_2_a <- sapply(list_of_matrices_2[[i]], FUN = function(y)  as.vector(y))
list_of_matrices_2_a <- apply(list_of_matrices_2_a, 1, function(x){.tmp_null <- sapply(x, is.null); x[.tmp_null] <- NA; unlist(x)})
list_of_matrices_2_a <- as.vector(unlist(list_of_matrices_2_a))
length(list_of_matrices_1_a); length(list_of_matrices_2_a)
names(list_of_matrices_1_a) <- names(list_of_matrices_2_a) <- rep(names(list_of_matrices_2[[i]]), sapply(list_of_matrices_2[[i]], length))
(cbind.data.frame(cancer_type=names(list_of_matrices_2_a), list_of_matrices_1_a, list_of_matrices_2_a, names_pairwise=names_pairwise))
})
}
comparison_TVpc_overlap <- list(comparison_two_lists_of_matrices(list_of_matrices_1 = totvars_list_original,
list_of_matrices_2 = co_oc_zeroes_fraction_overlap),
comparison_two_lists_of_matrices(list_of_matrices_1 = totvars_list_original,
list_of_matrices_2 = jaccard),
#comparison_two_lists_of_matrices(list_of_matrices_1 = totvars_list_original,
#                                 list_of_matrices_2 = totvars_list_noPC),
comparison_two_lists_of_matrices(list_of_matrices_1 = totvars_list_original,
list_of_matrices_2 = pearson),
comparison_two_lists_of_matrices(list_of_matrices_1 = co_oc_zeroes_fraction_overlap,
list_of_matrices_2 = jaccard),
comparison_two_lists_of_matrices(list_of_matrices_1 = totvars_list_noPC,
list_of_matrices_2 = jaccard),
comparison_two_lists_of_matrices(list_of_matrices_1 = pearson,
list_of_matrices_2 = jaccard),
comparison_two_lists_of_matrices(list_of_matrices_1 = totvars_list_noPC,
list_of_matrices_2 = co_oc_zeroes_fraction_overlap),
comparison_two_lists_of_matrices(list_of_matrices_1 = totvars_list_noPC,
list_of_matrices_2 = pearson),
comparison_two_lists_of_matrices(list_of_matrices_1 = co_oc_zeroes_fraction_overlap,
list_of_matrices_2 = pearson))
names(comparison_TVpc_overlap) <- c('totvars-co_oc_zeroes', 'totvars-jaccard', 'totvars-pearson', #'totvars-totvars_noPC',
'co_oc_zeroes-jaccard', 'totvars_noPC-jaccard', 'pearson-jaccard',
'totvars_noPC-co_oc_zeroes', 'totvars_noPC-pearson', 'co_oc_zeroes-pearson')
for(j in 1:length(comparison_TVpc_overlap)) names(comparison_TVpc_overlap[[j]]) <- names(totvars_list_original)
for(j in 1:length(comparison_TVpc_overlap)) for(i in 1:3){colnames(comparison_TVpc_overlap[[j]][[i]]) <-  c('cancer_type', 'total_variation', 'fraction_overlap_zeroes', 'names_pairwise')}
comparison_TVpc_overlap <- lapply(comparison_TVpc_overlap, function(x) melt(x, id.vars=c('fraction_overlap_zeroes', 'total_variation', 'names_pairwise')))
for(j in 1:length(comparison_TVpc_overlap)) comparison_TVpc_overlap[[j]][,'names_pairwise_crop'] <- substr(comparison_TVpc_overlap[[j]][,'names_pairwise'], 1, 2)
ggplot(comparison_TVpc_overlap[[1]], aes(x=fraction_overlap_zeroes, y=total_variation, col=value, shape=names_pairwise_crop))+
geom_point()+
scale_shape_manual(values=1:49) +
facet_wrap(.~L1)+
ggtitle("Fraction of overlap of zeroes and total variation (with pseudocounts)")
comparison_TVpc_overlap$`totvars-co_oc_zeroes`
head(comparison_TVpc_overlap$`totvars-co_oc_zeroes`)
totvars_list_original
totvars_list
totvars_list_noPC
comparison_TVpc_overlap
head(comparison_TVpc_overlap[[1]])
comparison_TVpc_overlap$`totvars_noPC-jaccard`
head(comparison_TVpc_overlap$`totvars_noPC-jaccard`)
for(i in 1:length(comparison_TVpc_overlap)){
name_axes <- strsplit(names(comparison_TVpc_overlap)[i], '-')[[1]]
ggplot(comparison_TVpc_overlap[[i]], aes(x=fraction_overlap_zeroes, y=total_variation, col=value, shape=names_pairwise_crop))+
geom_point()+
scale_shape_manual(values=1:49) +
facet_wrap(.~L1)+
ggtitle("Fraction of overlap of zeroes and total variation (with pseudocounts)")+
labs(x=name_axes[2], y=name_axes[1])
ggsave(paste0("../../../../results/real/CNA12kTCGA/co_ocurrence/comparisonCo-oc", name_axes[1], "_", name_axes[2], ".pdf"), width = 10)
}
comparison_TVpc_overlap
names(comparison_TVpc_overlap)
if(grep('noPC'), names(comparison_TVpc_overlap))
grep('noPC', names(comparison_TVpc_overlap)
)
for(i in 1:length(comparison_TVpc_overlap)){
name_axes <- strsplit(names(comparison_TVpc_overlap)[i], '-')[[1]]
if(grepl('noPC', names(comparison_TVpc_overlap)[i])){
tit <- "Fraction of overlap of zeroes and total variation (without pseudocounts)"
}else{
tit <- "Fraction of overlap of zeroes and total variation (with pseudocounts)"
}
ggplot(comparison_TVpc_overlap[[i]], aes(x=fraction_overlap_zeroes, y=total_variation, col=value, shape=names_pairwise_crop))+
geom_point()+
scale_shape_manual(values=1:49) +
facet_wrap(.~L1)+
ggtitle(tit)+
labs(x=name_axes[2], y=name_axes[1])
ggsave(paste0("../../../../results/real/CNA12kTCGA/co_ocurrence/comparisonCo-oc", name_axes[1], "_", name_axes[2], ".pdf"), width = 10)
}
for(i in 1:length(comparison_TVpc_overlap)){
name_axes <- strsplit(names(comparison_TVpc_overlap)[i], '-')[[1]]
if(grepl('noPC', names(comparison_TVpc_overlap)[i])){
tit <- "Fraction of overlap of zeroes and total variation (without pseudocounts)"
}else{
tit <- "Fraction of overlap of zeroes and total variation (with pseudocounts)"
}
ggplot(comparison_TVpc_overlap[[i]], aes(x=fraction_overlap_zeroes, y=total_variation, col=value, shape=names_pairwise_crop))+
geom_point()+
scale_shape_manual(values=1:49) +
facet_wrap(.~L1)+
ggtitle(tit)+
labs(x=name_axes[2], y=name_axes[1])
ggsave(paste0("../../../../results/real/CNA12kTCGA/co_ocurrence/comparisonCo-oc", name_axes[1], "_", name_axes[2], ".pdf"), width = 10, height = 8)
}
for(i in 1:length(comparison_TVpc_overlap)){
name_axes <- strsplit(names(comparison_TVpc_overlap)[i], '-')[[1]]
if(grepl('noPC', names(comparison_TVpc_overlap)[i])){
tit <- "Fraction of overlap of zeroes and total variation (without pseudocounts)"
}else{
tit <- "Fraction of overlap of zeroes and total variation (with pseudocounts)"
}
ggplot(comparison_TVpc_overlap[[i]], aes(x=fraction_overlap_zeroes, y=total_variation, col=value, shape=names_pairwise_crop))+
geom_point()+
scale_shape_manual(values=1:49) +
facet_wrap(.~L1)+
ggtitle(tit)+
labs(x=name_axes[2], y=name_axes[1])
ggsave(paste0("../../../../results/real/CNA12kTCGA/co_ocurrence/comparisonCo-oc", name_axes[1], "_", name_axes[2], ".pdf"), width = 13, height = 8)
}
library(CompSign)
###############################################################################################
############## Binary presence/absence for trajectories of mutational signatures ##############
###############################################################################################
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(ComplexHeatmap)
library(ggrepel)
source("../functions/basic_functions.R")
## Other functions
hamming <- function(v1, v2){ # hamming distance
stopifnot(length(v1) == length(v2))
sum(v1 == v2)/length(v1)
}
major_version_dataset = 'pancancer_OVsignatures'
for(i in list.files("../../../CompSign/data", pattern = "*rda", full.names = TRUE)){load(i)}
for(i in list.files("../../../CompSign/data", pattern = "*rda", full.names = TRUE)){load(i)}
dataset <- list(CNA_12K_TCGA=CNA_12K_TCGA,
CNA_12K_TCGA_v2_QP=CNA_12K_TCGA_v2_QP,
CNA_12K_TCGA_v2_YAPSA=CNA_12K_TCGA_v2_YAPSA)
## string to append to pictures, etc.
append_results <- list(CNA_12K_TCGA='_v1',
CNA_12K_TCGA_v2_QP='_v2_QP',
CNA_12K_TCGA_v2_YAPSA='_v2_YAPSA')
version_dataset <- 'CNA_12K_TCGA_v2_QP'
append_name_results <- append_results[[version_dataset]]
metadata_tmp <- metadata(dataset[[version_dataset]])
exposures_tmp <- count_matrix(dataset[[version_dataset]])
metadata_tmp_all <- lapply(dataset, metadata)
exposures_tmp_all <- lapply(dataset, count_matrix)
names(metadata_tmp_all) <- names(exposures_tmp_all) <- names(dataset)
outputfolder <- "../../results/ProjectTrajectories/binary_exposures/"
## this is soon to be deprecated in favour of the next (all three versions)
## Per cancer type
exposures_tmp_project_all <- list()
for(v in names(exposures_tmp_all)){
exposures_tmp_project_all[[v]] <- list()
for(i in unique(metadata_tmp_all[[v]]$project_id)){
exposures_tmp_project_all[[v]][[i]] <- exposures_tmp_all[[v]][metadata_tmp_all[[v]]$project_id== i,]
}
}
pdf(paste0(outputfolder, "presence.pdf"))
for(cancer_type in names(exposures_tmp_project_all[[version_dataset]])){
cat('Cancer type: ', cancer_type, '\n')
select_subset <- exposures_tmp_project_all[[version_dataset]][[cancer_type]]
bin_presence <- apply(select_subset, 1, function(x) x>0)
bin_presence_num <- apply(bin_presence, 2, as.numeric)
rownames(bin_presence_num) <- paste0('s', 1:7)
print(ComplexHeatmap::Heatmap(bin_presence_num,
cluster_rows = FALSE, cluster_columns = FALSE,
column_title = paste0('Presence/absence, ', version_dataset, ' ', cancer_type)))
}
dev.off()
library(MCMCpack)
library(compositions)
library(reshape2)
library(ggplot2)
library(ggthemr)
N <- 1e3
n <- 5
props <- MCMCpack::rdirichlet(N, rep(1, n))
## ordered by mean abundance
props <- props[,order(colSums(props))]
predict <- runif(N)
predict
props
compositions::ilr(props, V = c(-1, 1, -1, 1, 1))
lm(predict~compositions::ilr(props, V = c(-1, 1, -1, 1, 1)))
summary(lm(predict~compositions::ilr(props, V = c(-1, 1, -1, 1, 1))))
gsi.buildilrBase(-1, 1, -1, 1, 1))
gsi.buildilrBase(-1, 1, -1, 1, 1)
gsi.buildilrBase(c(-1, 1, -1, 1, 1))
gsi.buildilrBase(c(-1, 1, -1, 1, 1))
gsi.buildilrBase(matrix(-1, 1, -1, 1, 1))
gsi.buildilrBase(matrix(c(-1, 1, -1, 1, 1)))
summary(lm(predict~compositions::ilr(props, V = gsi.buildilrBase(matrix(c(-1, 1, -1, 1, 1))))))
summary(lm(predict~compositions::ilr(props, V = c(-1, 1, -1, 1, 1))))
summary(lm(predict~compositions::ilr(props, V = gsi.buildilrBase(matrix(c(-1, 1, -1, 1, 1))))))
summary(lm(predict~compositions::ilr(props, V = c(-1, 1, -1, 1, 1))))
summary(lm(predict~compositions::ilr(props, V = gsi.buildilrBase(matrix(c(-1, 1, -1, 1, 1))))))
aa <- sapply(1:34, function(x) paste0('B', x, '*U', x)
)
a
aa <- sapply(1:34, function(x) paste0('B', x, '*U', x))
aa
paste0(aa, collapse='+')
aa <- sapply(1:34, function(x) paste0('B', x, '*U', x))
paste0('=', paste0(aa, collapse='+'))
aa <- sapply(1:42, function(x) paste0('B', x, '*U', x))
paste0('=', paste0(aa, collapse='+'))
aa <- sapply(1:42, function(x) paste0('B', x, '*$U', x))
paste0('=', paste0(aa, collapse='+'))
rm(list = ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
