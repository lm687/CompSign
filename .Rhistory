#' metadata dataframe (to be specified in name_clinical). There is also an
#' option (bool_comparison) to add a second dendrogram using Euclidean distance,
#' for comparison.
createDendrogram <- function(merged_object, name_clinical, bool_comparison, ...){
require(dendextend)
require(RColorBrewer)
# to add: possibility to extend colour vector
col_vec <- brewer.pal(n = 8, name = "Set2")
tmp_toplot_dendro <- as.dendrogram(hclust(dist(acomp(merged_object@count_matrix))))
labels_colors(tmp_toplot_dendro) <- col_vec[as.factor(merged_object@df[,name_clinical][labels(tmp_toplot_dendro)])]
labels(tmp_toplot_dendro) <- rep('.', nrow(merged_object@df))
plot(tmp_toplot_dendro, main='Aitchison distance')
if(bool_comparison){
par(mfrow=c(1,2))
tmp_toplot_dendro_nonComp <- as.dendrogram(hclust(dist(merged_object@count_matrix)))
labels(tmp_toplot_dendro_nonComp) <-  rep('.', nrow(merged_object@df))
labels_colors(tmp_toplot_dendro_nonComp) <- c('black', 'red')[as.factor(merged_object@df[,name_clinical][labels(tmp_toplot_dendro_nonComp)])]
plot(tmp_toplot_dendro_nonComp, main='Euclidean distance')
}
}
createDendrogram(two_normal_pops, bool_comparison = TRUE)
#' Create a dendrogram, using Aithchison distance, of the samples in a merged
#' object. The labels are coloured according to the one of the columns of its
#' metadata dataframe (to be specified in name_clinical). There is also an
#' option (bool_comparison) to add a second dendrogram using Euclidean distance,
#' for comparison.
createDendrogram <- function(merged_object, name_clinical, bool_comparison, ...){
require(dendextend)
require(RColorBrewer)
# to add: possibility to extend colour vector
col_vec <- brewer.pal(n = 8, name = "Set2")
tmp_toplot_dendro <- as.dendrogram(hclust(dist(acomp(merged_object@count_matrix))))
labels_colors(tmp_toplot_dendro) <- col_vec[as.factor(merged_object@df[,name_clinical][labels(tmp_toplot_dendro)])]
labels(tmp_toplot_dendro) <- rep('.', nrow(merged_object@df))
if(bool_comparison) par(mfrow=c(1,2))
plot(tmp_toplot_dendro, main='Aitchison distance')
if(bool_comparison){
tmp_toplot_dendro_nonComp <- as.dendrogram(hclust(dist(merged_object@count_matrix)))
labels(tmp_toplot_dendro_nonComp) <-  rep('.', nrow(merged_object@df))
labels_colors(tmp_toplot_dendro_nonComp) <- c('black', 'red')[as.factor(merged_object@df[,name_clinical][labels(tmp_toplot_dendro_nonComp)])]
plot(tmp_toplot_dendro_nonComp, main='Euclidean distance')
}
}
dev.off()
createDendrogram(two_normal_pops, bool_comparison = TRUE)
#' Create a dendrogram, using Aithchison distance, of the samples in a merged
#' object. The labels are coloured according to the one of the columns of its
#' metadata dataframe (to be specified in name_clinical). There is also an
#' option (bool_comparison) to add a second dendrogram using Euclidean distance,
#' for comparison.
createDendrogram <- function(merged_object, name_clinical, bool_comparison, ...){
require(dendextend)
require(RColorBrewer)
# to add: possibility to extend colour vector
col_vec <- brewer.pal(n = 8, name = "Set2")
tmp_toplot_dendro <- as.dendrogram(hclust(dist(acomp(merged_object@count_matrix))))
labels_colors(tmp_toplot_dendro) <- col_vec[as.factor(merged_object@df[,name_clinical][labels(tmp_toplot_dendro)])]
labels(tmp_toplot_dendro) <- rep('.', nrow(merged_object@df))
if(bool_comparison) par(mfrow=c(1,2))
plot(tmp_toplot_dendro, main='Aitchison distance')
if(bool_comparison){
tmp_toplot_dendro_nonComp <- as.dendrogram(hclust(dist(merged_object@count_matrix)))
labels(tmp_toplot_dendro_nonComp) <-  rep('.', nrow(merged_object@df))
labels_colors(tmp_toplot_dendro_nonComp) <- col_vec[as.factor(merged_object@df[,name_clinical][labels(tmp_toplot_dendro_nonComp)])]
plot(tmp_toplot_dendro_nonComp, main='Euclidean distance')
}
}
createDendrogram(two_normal_pops, bool_comparison = TRUE)
build()
build()
install()
build()
install()
rm(list = ls())
library(CompSign)
library(compositions)
data("three_comp_linear_relation")
data("two_normal_pops")
plot(three_comp_linear_relation)
merged_compositional_to_sign(two_normal_pops)
plot(acomp(two_normal_pops@count_matrix),
col=as.factor(two_normal_pops@df[,1]),
pch=4)
plot(hclust(dist(acomp(two_normal_pops@count_matrix))))
two_normal_pops_downsampling <- two_normal_pops
downsampling_idx <- sample(nrow(two_normal_pops_downsampling@count_matrix),
size = 0.1*nrow(two_normal_pops_downsampling@count_matrix))
png('../CDA_in_Cancer/text/other_presentations/20181015/ex_cluster1.png')
plot(acomp(two_normal_pops_downsampling@count_matrix),
col=as.factor(two_normal_pops_downsampling@df[,1]),
pch=4)
dev.off()
# dendrogram
library(dendextend)
tmp_toplot_dendro <- as.dendrogram(hclust(dist(acomp(two_normal_pops_downsampling@count_matrix))))
tmp_toplot_dendro_nonComp <- as.dendrogram(hclust(dist(two_normal_pops_downsampling@count_matrix)))
labels_colors(tmp_toplot_dendro) <- c('black', 'red')[as.factor(two_normal_pops_downsampling@df[,1][labels(tmp_toplot_dendro)])]
labels_colors(tmp_toplot_dendro_nonComp) <- c('black', 'red')[as.factor(two_normal_pops_downsampling@df[,1][labels(tmp_toplot_dendro_nonComp)])]
labels(tmp_toplot_dendro) <- labels(tmp_toplot_dendro_nonComp) <-  rep('.', nrow(two_normal_pops_downsampling@df))
png('../CDA_in_Cancer/text/other_presentations/20181015/ex_cluster2.png')
plot(tmp_toplot_dendro, main='Aitchison distance')
dev.off()
png('../CDA_in_Cancer/text/other_presentations/20181015/ex_cluster3.png')
plot(tmp_toplot_dendro_nonComp, main='Euclidean distance')
dev.off()
createDendrogram(two_normal_pops, bool_comparison = TRUE)
createDendrogram(two_normal_pops, bool_comparison = TRUE)
createDendrogram(two_normal_pops_downsampling, bool_comparison = TRUE)
dev.off()
dev.off()
png('../CDA_in_Cancer/text/other_presentations/20181015/ex_cluster1.png')
plot(acomp(two_normal_pops_downsampling@count_matrix),
col=as.factor(two_normal_pops_downsampling@df[,1]),
pch=4)
dev.off()
# dendrogram
library(dendextend)
tmp_toplot_dendro <- as.dendrogram(hclust(dist(acomp(two_normal_pops_downsampling@count_matrix))))
tmp_toplot_dendro_nonComp <- as.dendrogram(hclust(dist(two_normal_pops_downsampling@count_matrix)))
labels_colors(tmp_toplot_dendro) <- c('black', 'red')[as.factor(two_normal_pops_downsampling@df[,1][labels(tmp_toplot_dendro)])]
labels_colors(tmp_toplot_dendro_nonComp) <- c('black', 'red')[as.factor(two_normal_pops_downsampling@df[,1][labels(tmp_toplot_dendro_nonComp)])]
labels(tmp_toplot_dendro) <- labels(tmp_toplot_dendro_nonComp) <-  rep('.', nrow(two_normal_pops_downsampling@df))
png('../CDA_in_Cancer/text/other_presentations/20181015/ex_cluster2.png')
plot(tmp_toplot_dendro, main='Aitchison distance')
dev.off()
png('../CDA_in_Cancer/text/other_presentations/20181015/ex_cluster3.png')
plot(tmp_toplot_dendro_nonComp, main='Euclidean distance')
dev.off()
createDendrogram(two_normal_pops, bool_comparison = TRUE)
createDendrogram(two_normal_pops_downsampling, bool_comparison = TRUE)
var.acomp(acomp(two_normal_pops@count_matrix))
roxygen2::roxygenise()
rm(list = ls())
library(CompSign)
library(compositions)
data("three_comp_linear_relation")
data("two_normal_pops")
plot(three_comp_linear_relation)
## test for normality
qqnorm.acomp(two_normal_pops, pch=19, cex=0.2)
## test for normality
qqnorm.acomp(acomp(two_normal_pops@count_matrix), pch=19, cex=0.2)
dim(two_normal_pops@count_matrix)
qqnorm.acomp(acomp(two_normal_pops@count_matrix[1:1000,]), pch=19, cex=0.2)
rm(list = ls())
library(CompSign)
library(compositions)
data("three_comp_linear_relation")
data("two_normal_pops")
plot(three_comp_linear_relation)
three_comp_linear_relation
three_comp_linear_relation@df
two_normal_pops
two_normal_pops@df
tail(two_normal_pops@df)
two_normal_pops@df)
## cat variable as predictor
contrasts(two_normal_pops@df)
factor(two_normal_pops@df)
ubnlist(two_normal_pops@df)
unlist(two_normal_pops@df)
as.factor(unlist(two_normal_pops@df))
## cat variable as predictor
contrasts(as.factor(unlist(two_normal_pops@df)))
boxplot(acomp(two_normal_pops@count_matrix), unlist(two_normal_pops@df))
boxplot((two_normal_pops@count_matrix), unlist(two_normal_pops@df))
boxplot(acomp(two_normal_pops@count_matrix), unlist(two_normal_pops@df))
model_discrete <- lm(ilr(acomp(two_normal_pops@count_matrix))~unlist(two_normal_pops@df))
anova(model_discrete)
unlist(two_normal_pops@df)
sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
anova(model_discrete)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
acomp(two_normal_pops@count_matrix)
coef(model_discrete)
two_normal_pops
biplot(acomp(two_normal_pops@count_matrix))
model_discrete_scrambled
model_discrete_with_alr <- lm(alr(acomp(two_normal_pops@count_matrix))~unlist(two_normal_pops@df))
anova(model_discrete_with_alr)
anova(model_discrete)
anova(model_discrete_with_alr)
## with LDA
library(MASS)
lda(x=data.frame(ilr(acomp(two_normal_pops@count_matrix))), grouping=unlist(two_normal_pops@df))
lda_res <- lda(x=data.frame(ilr(acomp(two_normal_pops@count_matrix))), grouping=unlist(two_normal_pops@df))
ilrInv(lda_res$means, orig=acomp(two_normal_pops@count_matrix))
V <- ilrBase(acomp(two_normal_pops@count_matrix))
V
rownames(V) <- colnames(acomp(two_normal_pops@count_matrix))
t(ilr2clr(t(lda_res$scaling), V=V))
sum(t(ilr2clr(t(lda_res$scaling), V=V))
)
plot3D(acomp(two_normal_pops@count_matrix))
rm(list = ls())
## Simulation of dataset #2
rm(list = ls())
require(scales)
require(compositions)
require(MCMCpack)
N = 1e3
clustered_dataset <- rbind(MCMCpack::rdirichlet(N, c(0.2,1,0.5,1)),
MCMCpack::rdirichlet(N, c(0.2,1,2,6)))
plot(acomp(clustered_dataset),
pch=3, cex=0.1, col=c('red', 'green')[c(rep(1, (N)),
rep(2, (N)))])
col_two_pops <- c('red', 'green')[c(rep(1, (N)),
rep(2, (N)))]
## two normally distributed populations
two_pops <- acomp(rbind(rnorm.acomp(n = N, mean = c(0.2,1,1),
var = matrix(c(0.2,0.1,0.0,
0.1,0.2,0.0,
0.0,0.0,0.2),
byrow=TRUE,nrow=3)),
rnorm.acomp(n = N, mean = c(1,0.1,1),
var = matrix(c(0.2,0.1,0.0,
0.1,0.2,0.0,
0.0,0.0,0.2),
byrow=TRUE,nrow=3))))
two_pops
## extended
two_pops_extended <- cbind(two_pops, MCMCpack::rdirichlet(5, rep(1,5)))
dim(two_pops)
## extended
two_pops_extended <- cbind(two_pops, MCMCpack::rdirichlet(dim(two_pops)[1], rep(1,5),
))
## extended
two_pops_extended <- cbind(two_pops, MCMCpack::rdirichlet(dim(two_pops)[1]))
## extended
two_pops_extended <- cbind(two_pops,
MCMCpack::rdirichlet(dim(two_pops)[1],
rep(1,5)))
two_pops_extended
sweep(two_pops_extended,
1,
rowSums(two_pops_extended),
'/')
rowSums(sweep(two_pops_extended,
1,
rowSums(two_pops_extended),
'/'))
two_pops_extended <- acomp(sweep(two_pops_extended,
1,
rowSums(two_pops_extended),
'/'))
dim(two_pops_extended)
two_pops
as.factor(two_pops_extended)
two_normal_pops_extended <- new("merged_compositional",
id='two_normal_pops_extended',
id_samples=c(paste0("Pop1_", 1:N),
paste0("Pop2_", 1:N)),
id_signatures= paste0('s', 1:dim(two_pops_extended)[2]),
count_matrix=matrix(two_pops_extended, ncol=3),
df=data.frame(pop_boolean=as.numeric(as.factor(col_two_pops))-1)
)
two_normal_pops_extended <- new("merged_compositional",
id='two_normal_pops_extended',
id_samples=c(paste0("Pop1_", 1:N),
paste0("Pop2_", 1:N)),
id_signatures= paste0('s', 1:dim(two_pops_extended)[2]),
count_matrix=matrix(two_pops_extended, ncol=dim(two_pops_extended)[2]),
df=data.frame(pop_boolean=as.numeric(as.factor(col_two_pops))-1)
)
save(two_normal_pops_extended, file = "../CompSign/data/two_normal_pops_extended.rda")
library(devtools)
build()
install()
rm(list = ls())
rm(list = ls())
library(CompSign)
library(compositions)
data("three_comp_linear_relation")
data("two_normal_pops")
data("two_normal_pops_extended")
two_normal_pops_extended
.rs.restartR()
.rs.restartR()
rm(list = ls())
library(CompSign)
library(compositions)
data("three_comp_linear_relation")
data("two_normal_pops")
data("two_normal_pops_extended")
two_normal_pops_extended
plot3D(acomp(two_normal_pops_extended@count_matrix))
lda_res <- lda(x=data.frame(ilr(acomp(two_normal_pops@count_matrix))), grouping=unlist(two_normal_pops@df))
ilrInv(lda_res$means, orig=acomp(two_normal_pops@count_matrix))
## with LDA
library(MASS)
lda_res <- lda(x=data.frame(ilr(acomp(two_normal_pops@count_matrix))), grouping=unlist(two_normal_pops@df))
ilrInv(lda_res$means, orig=acomp(two_normal_pops@count_matrix))
V <- ilrBase(acomp(two_normal_pops@count_matrix))
rownames(V) <- colnames(acomp(two_normal_pops@count_matrix))
t(ilr2clr(t(lda_res$scaling), V=V))
###############################
## cat variable as predictor ##
contrasts(as.factor(unlist(two_normal_pops@df)))
boxplot(acomp(two_normal_pops@count_matrix), unlist(two_normal_pops@df))
###############################
## cat variable as predictor ##
contrasts(as.factor(unlist(two_normal_pops_extended@df)))
boxplot(acomp(two_normal_pops_extended@count_matrix), unlist(two_normal_pops@df))
model_discrete <- lm(ilr(acomp(two_normal_pops@count_matrix))~unlist(two_normal_pops@df))
model_discrete <- lm(ilr(acomp(two_normal_pops_extended@count_matrix))~unlist(two_normal_pops_extended@df))
model_discrete_with_alr <- lm(alr(acomp(two_normal_pops_extended@count_matrix))~unlist(two_normal_pops_extended@df))
anova(model_discrete)
anova(model_discrete_with_alr)
coef(model_discrete)
anova(model_discrete)
anova(model_discrete_with_alr)
coef(model_discrete)
coef(model_discrete_with_alr)
coef(model_discrete_with_alr)
plot(coef(model_discrete_with_alr)[,2])
coef(model_discrete_with_alr)[,2]
coef(model_discrete_with_alr)[1,]
coef(model_discrete_with_alr)[2,]
plot(coef(model_discrete_with_alr)[2,])
plot(coef(model_discrete_with_alr)[2,], type='l')
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
model_discrete_scrambled <- lm(ilr(acomp(two_normal_pops@count_matrix))~sample(c(0, 1), length(unlist(two_normal_pops@df)), TRUE))
anova(model_discrete_scrambled)
boxplot(acomp(two_normal_pops_extended@count_matrix), unlist(two_normal_pops_extended@df))
acomp(two_normal_pops_extended@count_matrix)
unlist(two_normal_pops_extended@df)
outer(1:8, unlist(two_normal_pops_extended@df),
FUN = boxplot(acomp(two_normal_pops_extended@count_matrix)[,X],
Y))
outer(X = 1:8, Y = unlist(two_normal_pops_extended@df),
FUN = boxplot(acomp(two_normal_pops_extended@count_matrix)[,X],
Y))
outer(X = 1:8, Y = unlist(two_normal_pops_extended@df),
FUN = function(X,Y) boxplot(acomp(two_normal_pops_extended@count_matrix)[,X],
Y))
prcomp(acomp(two_normal_pops_extended@count_matrix))
biplot(prcomp(acomp(two_normal_pops_extended@count_matrix)))
biplot(princomp(acomp(two_normal_pops_extended@count_matrix)))
biplot(princomp(alr(acomp(two_normal_pops_extended@count_matrix))))
biplot(princomp(ilr(acomp(two_normal_pops_extended@count_matrix))))
var.acomp(acomp(two_normal_pops_extended@count_matrix))
image(var.acomp(acomp(two_normal_pops_extended@count_matrix)))
rm(list = ls())
library(CompSign)
library(compositions)
data("three_comp_linear_relation")
data("two_normal_pops")
data("two_normal_pops_extended")
plot(three_comp_linear_relation)
###############################
## cat variable as predictor ##
contrasts(as.factor(unlist(two_normal_pops_extended@df)))
boxplot(acomp(two_normal_pops_extended@count_matrix), unlist(two_normal_pops_extended@df))
qqnorm.acomp(acomp(two_normal_pops@count_matrix[1:1000,]), pch=19, cex=0.2)
acomp(two_normal_pops@count_matrix[1:1000,])[,1]
hist(acomp(two_normal_pops@count_matrix[1:1000,])[,1])
hist(acomp(two_normal_pops@count_matrix[1:1000,]))
clr(acomp(two_normal_pops@count_matrix[1:1000,]))
alr(acomp(two_normal_pops@count_matrix[1:1000,]))
alr(acomp(two_normal_pops@count_matrix[1:1000,]))[,1]
hist(alr(acomp(two_normal_pops@count_matrix[1:1000,]))[,1])
hist(alr(acomp(two_normal_pops@count_matrix[1:1000,]))[,1], breaks=100)
hist(ilr(acomp(two_normal_pops@count_matrix[1:1000,]))[,1], breaks=100)
hist(alr(acomp(two_normal_pops@count_matrix[1:1000,]))[,1], breaks=100)
hist(alr(acomp(two_normal_pops@count_matrix[1:1000,]))[,1], breaks=50)
hist(alr(acomp(two_normal_pops@count_matrix[1:1000,]))[,2], breaks=100)
qqnorm.acomp(acomp(two_normal_pops@count_matrix[1:1000,]), pch=19, cex=0.2)
## test for normality
qqnorm.acomp(acomp(two_normal_pops@count_matrix), pch=19, cex=0.2)
qqnorm.acomp(acomp(two_normal_pops@count_matrix[1:1000,]), pch=19, cex=0.2)
rm(list = ls())
library(CompSign)
library(compositions)
data("three_comp_linear_relation")
data("two_normal_pops")
data("two_normal_pops_extended")
plot(three_comp_linear_relation)
## with LDA
library(MASS)
lda_res <- lda(x=data.frame(ilr(acomp(two_normal_pops@count_matrix))), grouping=unlist(two_normal_pops@df))
ilrInv(lda_res$means, orig=acomp(two_normal_pops@count_matrix))
V <- ilrBase(acomp(two_normal_pops@count_matrix))
rownames(V) <- colnames(acomp(two_normal_pops@count_matrix))
t(ilr2clr(t(lda_res$scaling), V=V))
lda_res <- lda(x=data.frame(ilr(acomp(two_normal_pops_extended@count_matrix))),
grouping=unlist(two_normal_pops_extended@df))
ilrInv(lda_res$means, orig=acomp(two_normal_pops_extended@count_matrix))
V <- ilrBase(acomp(two_normal_pops_extended@count_matrix))
V
rownames(V) <- colnames(acomp(two_normal_pops_extended@count_matrix))
t(ilr2clr(t(lda_res$scaling), V=V))
plot3D(acomp(two_normal_pops_extended@count_matrix))
V
t(ilr2clr(t(lda_res$scaling), V=V))
lda_res
t(ilr2clr(t(lda_res$scaling), V=V))
two_normal_pops_extended
plot(acomp(two_normal_pops_extended@count_matrix))
plot(acomp(two_normal_pops_extended@count_matrix),
col=as.factor(unlist(two_normal_pops_extended@df)))
plot(acomp(two_normal_pops_extended@count_matrix),
col=alpha(c('black', 'red')[as.factor(unlist(two_normal_pops_extended@df))],
0.2))
library(scales)
plot(acomp(two_normal_pops_extended@count_matrix),
col=alpha(c('black', 'red')[as.factor(unlist(two_normal_pops_extended@df))],
0.2))
plot(acomp(two_normal_pops_extended@count_matrix),
col=alpha(c('black', 'red')[as.factor(unlist(two_normal_pops_extended@df))],
0.01), cex=0.2, pch=19)
png('../CDA_in_Cancer/text/other_presentations/20181015/ex_lda1.png')
plot(acomp(two_normal_pops_extended@count_matrix),
col=alpha(c('black', 'red')[as.factor(unlist(two_normal_pops_extended@df))],
0.01), cex=0.2, pch=19)
dev.off()
lda_res <- lda(x=data.frame(ilr(acomp(two_normal_pops_extended@count_matrix))),
grouping=unlist(two_normal_pops_extended@df))
lda_res
lda_res_alr <- lda(x=data.frame(alr(acomp(two_normal_pops_extended@count_matrix))),
grouping=unlist(two_normal_pops_extended@df))
lda_res_alr
lda_res
ilrInv(lda_res$means, orig=acomp(two_normal_pops_extended@count_matrix))
V <- ilrBase(acomp(two_normal_pops_extended@count_matrix))
V
rownames(V) <- colnames(acomp(two_normal_pops_extended@count_matrix))
t(ilr2clr(t(lda_res$scaling), V=V))
lda(x=data.frame(clr(acomp(two_normal_pops_extended@count_matrix))),
grouping=unlist(two_normal_pops_extended@df))
t(ilr2clr(t(lda_res$scaling), V=V))
V
biplot(princomp(acomp(two_normal_pops_extended@count_matrix)))
biplot(princomp(alr(acomp(two_normal_pops_extended@count_matrix))))
biplot(princomp(ilr(acomp(two_normal_pops_extended@count_matrix))))
image(var.acomp(acomp(two_normal_pops_extended@count_matrix)))
biplot(princomp(ilr(acomp(two_normal_pops_extended@count_matrix))))
biplot(princomp(alr(acomp(two_normal_pops_extended@count_matrix))))
png('../CDA_in_Cancer/text/other_presentations/20181015/ex_lda2.png')
biplot(princomp(acomp(two_normal_pops_extended@count_matrix)))
dev.off()
princomp(acomp(two_normal_pops_extended@count_matrix))
tmp_pca <- princomp(acomp(two_normal_pops_extended@count_matrix))
tmp_pca$sdev^2/sum(tmp_pca$sdev^2)
model_discrete <- lm(ilr(acomp(two_normal_pops_extended@count_matrix))~unlist(two_normal_pops_extended@df))
model_discrete_with_alr <- lm(alr(acomp(two_normal_pops_extended@count_matrix))~unlist(two_normal_pops_extended@df))
anova(model_discrete)
anova(model_discrete_with_alr)
model_discrete <- lm(ilr(acomp(two_normal_pops_extended@count_matrix))~unlist(two_normal_pops_extended@df))
model_discrete_with_alr <- lm(alr(acomp(two_normal_pops_extended@count_matrix))~unlist(two_normal_pops_extended@df))
anova(model_discrete)
anova(model_discrete_with_alr)
coef(model_discrete)
coef(model_discrete_with_alr)
plot(coef(model_discrete_with_alr)[2,], type='l')
model_discrete_with_alr
acomp(two_normal_pops@count_matrix)
library(entropy)
mi.empirical(alr(acomp(two_normal_pops@count_matrix)))
alr(acomp(two_normal_pops@count_matrix))
?mi.empirical
a <- matrix(runif(16), ncol=4)
a
a <- cbind(a, a[,1]+2*a[,2])
a
cov(a)
det(cov(a))
eigen(a)
eigen(cov(a))
