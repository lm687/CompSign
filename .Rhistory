show_rownames = FALSE, show_colnames = FALSE)
pheatmap(t(signatures$Phat %*% signatures$Ehat), cluster_rows = FALSE, cluster_cols = FALSE)
pheatmap0 <- function(x, ...) pheatmap(x, cluster_rows = FALSE, cluster_cols = FALSE, show_rownames = FALSE, show_colnames = FALSE, ...)
signatures_normalised <- sweep(signatures$Phat, 2, colSums(signatures$Phat), '/')
pheatmap0(t(signatures_normalised))
pheatmap0(do.call('rbind', sign))
cos.sim <- function(A, B) {
A = t(signatures_normalised)[A,]
B = do.call('rbind', sign)[B,-97]
return( sum(A*B)/sqrt(sum(A^2)*sum(B^2)) )
}
pheatmap0(outer(1:nrow(t(signatures_normalised)),
1:(nrow(do.call('rbind', sign))),
Vectorize(cos.sim)),
main = 'Cosine similarity between true (simulated) \nand extracted signatures')
}
signatures_normalised
signatures
signatures$Ehat
signatures$Phat
rowSums(signatures$Phat)
diag(rowSums(signatures$Phat))
diag(1/rowSums(signatures$Phat))
exposures_normalised <- signatures$Ehat %*% diag(1/rowSums(signatures$Phat))
dim(signatures$Ehat)
signatures$Phat
colSums(signatures$Phat)
signatures$Phat
dim9signatures$Phat
dim(signatures$Phat)
dim(signatures$Ehat)
phat (sigs)
colSums(signatures$Phat)
diag(colSums(signatures$Phat))
1/diag(colSums(signatures$Phat))
diag(1/colSums(signatures$Phat))
signatures$Phat %*% diag(1/colSums(signatures$Phat))
(signatures$Phat %*% diag(1/colSums(signatures$Phat))) == signatures_normalised
to_deconv <- do.call('rbind',
lapply(res_sim_contribution_signatures, function(x) x$tab))
to_deconv <- to_deconv
colnames(to_deconv) <- cat_mut
rownames(to_deconv) <- paste0('Sample_', 1:nrow(to_deconv))
to_deconv <- do.call('rbind',
lapply(res_sim_contribution_signatures, function(x) x$tab))
colnames(to_deconv) <- cat_mut; rownames(to_deconv) <- paste0('Sample_', 1:nrow(to_deconv))
##                           ##
##       DECONVOLUTION       ##
##                           ##
## Deconvolute with NMF
deconv_with_NMF_raw <- FALSE
##                           ##
##       DECONVOLUTION       ##
##                           ##
nmf_deconv_it
rmse_vec <- c()
##                           ##
##       DECONVOLUTION       ##
##                           ##
rmse_vec <- c()
rank <- 5 ## arbitrary
cat('Rank:', i, '\n')
i <- 5 ## arbitrary rank
cat('Rank:', i, '\n')
nmf_deconv_it[[i]] <- NMF::nmf(to_deconv,
rank = i,
seed=134)
nmf_deconv_it <- NMF::nmf(to_deconv,
rank = i,
seed=134)
rmse_vec <- sqrt(mean(to_deconv-fitted(nmf_deconv_it[[i]]))**2)
rmse_vec <- sqrt(mean(to_deconv-fitted(nmf_deconv_it[[i]]))**2)
rmse_vec <- sqrt(mean(to_deconv-fitted(nmf_deconv_it))**2)
rmse_vec
rmse <- sqrt(mean(to_deconv-fitted(nmf_deconv_it))**2)
par(mfrow=c(1,1))
plot(rmse_vec, type='l')
par(mfrow=c(1,2))
image(to_deconv)
image(fitted(nmf_deconv_it[[10]]))
par(mfrow=c(1,1))
image(fitted(nmf_deconv_it))
par(mfrow=c(1,2))
image(to_deconv)
image(fitted(nmf_deconv_it))
library(fields)
par(mfrow=c(1,2))
image.plot(to_deconv)
image.plot(fitted(nmf_deconv_it))
image.plot(to_deconv, main='Original')
image.plot(fitted(nmf_deconv_it), main='Deconvoluted')
par(mfrow=c(1,1))
require(pheatmap)
pheatmap(to_deconv-fitted(nmf_deconv_it[[10]]))
normalise_NMF_output <- function(raw_sigature_mat, raw_exposure_mat){
## w is exposures
w <- raw_exposure_mat
## h is signatures
h <- raw_sigature_mat
all(w == deconv@fit@W) & all(h == deconv@fit@H)
all( (w %*% h) == fitted(deconv) )
## we wish rowSums of the signature matrix to add up to the unit, as it's probabilities
norm_mat <- diag(1/rowSums(h))
norm_mat2 <- diag(rowSums(h))
par(mfrow=c(1,2))
all.equal(fitted(deconv), w %*% norm_mat2 %*% norm_mat %*% h)
return(list( exposures = (w %*% norm_mat2), signatures = (norm_mat %*% h) ))
}
nmf_deconv_it
normalise_NMF_output(raw_sigature_mat = basis(nmf_deconv_it), raw_exposure_mat = coef(nmf_deconv_it))
normalise_NMF_output <- function(raw_sigature_mat, raw_exposure_mat, fitted_mat){
## w is exposures
w <- raw_exposure_mat
## h is signatures
h <- raw_sigature_mat
## we wish rowSums of the signature matrix to add up to the unit, as it's probabilities
norm_mat <- diag(1/rowSums(h))
norm_mat2 <- diag(rowSums(h))
par(mfrow=c(1,2))
all.equal(fitted_mat, w %*% norm_mat2 %*% norm_mat %*% h)
return(list( exposures = (w %*% norm_mat2), signatures = (norm_mat %*% h) ))
}
normalise_NMF_output <- function(raw_sigature_mat, raw_exposure_mat, fitted_mat){
## w is exposures
w <- raw_exposure_mat
## h is signatures
h <- raw_sigature_mat
## we wish rowSums of the signature matrix to add up to the unit, as it's probabilities
norm_mat <- diag(1/rowSums(h))
norm_mat2 <- diag(rowSums(h))
par(mfrow=c(1,2))
all.equal(fitted_mat, w %*% norm_mat2 %*% norm_mat %*% h)
return(list( exposures = (w %*% norm_mat2), signatures = (norm_mat %*% h) ))
}
normalise_NMF_output(raw_sigature_mat = basis(nmf_deconv_it), raw_exposure_mat = coef(nmf_deconv_it),
fitted_mat = fitted(nmf_deconv_it))
basis(nmf_deconv_it)
coef(nmf_deconv_it)
raw_sigature_mat = basis(nmf_deconv_it);
raw_exposure_mat = coef(nmf_deconv_it);
fitted_mat = fitted(nmf_deconv_it)
## w is exposures
w <- raw_exposure_mat
## h is signatures
h <- raw_sigature_mat
## we wish rowSums of the signature matrix to add up to the unit, as it's probabilities
norm_mat <- diag(1/rowSums(h))
norm_mat2 <- diag(rowSums(h))
par(mfrow=c(1,2))
all.equal(fitted_mat, w %*% norm_mat2 %*% norm_mat %*% h)
## w is exposures
w <- raw_signature_mat
## h is signatures
h <- raw_exposure_mat
## we wish rowSums of the signature matrix to add up to the unit, as it's probabilities
norm_mat <- diag(1/rowSums(h))
norm_mat2 <- diag(rowSums(h))
par(mfrow=c(1,2))
all.equal(fitted_mat, w %*% norm_mat2 %*% norm_mat %*% h)
## w is exposures
w <- raw_exposure_mat
## h is signatures
h <- raw_signature_mat
raw_signature_mat = basis(nmf_deconv_it)
## w is exposures
w <- raw_exposure_mat
## h is signatures
h <- raw_signature_mat
w
## we wish rowSums of the signature matrix to add up to the unit, as it's probabilities
norm_mat <- diag(1/rowSums(h))
norm_mat2 <- diag(rowSums(h))
par(mfrow=c(1,2))
all.equal(fitted_mat, w %*% norm_mat2 %*% norm_mat %*% h)
## w is exposures
w <- raw_signature_mat
## h is signatures
h <- raw_exposure_mat
## we wish rowSums of the signature matrix to add up to the unit, as it's probabilities
norm_mat <- diag(1/rowSums(h))
norm_mat2 <- diag(rowSums(h))
par(mfrow=c(1,2))
all.equal(fitted_mat, w %*% norm_mat2 %*% norm_mat %*% h)
raw_signature_mat
raw_exposure_mat
raw_exposure_mat = basis(nmf_deconv_it),;
raw_signature_mat = coef(nmf_deconv_it)
raw_exposure_mat = basis(nmf_deconv_it);
raw_signature_mat = coef(nmf_deconv_it)
## w is exposures
w <- raw_exposure_mat
## h is signatures
h <- raw_signature_mat
w
h
## we wish rowSums of the signature matrix to add up to the unit, as it's probabilities
norm_mat <- diag(1/rowSums(h))
norm_mat2 <- diag(rowSums(h))
par(mfrow=c(1,2))
all.equal(fitted_mat, w %*% norm_mat2 %*% norm_mat %*% h)
if(!all.equal(fitted_mat, w %*% norm_mat2 %*% norm_mat %*% h)){stop('Problemo')}
normalise_NMF_output <- function(raw_signature_mat, raw_exposure_mat, fitted_mat){
## w is exposures
w <- raw_exposure_mat
## h is signatures
h <- raw_signature_mat
## we wish rowSums of the signature matrix to add up to the unit, as it's probabilities
norm_mat <- diag(1/rowSums(h))
norm_mat2 <- diag(rowSums(h))
par(mfrow=c(1,2))
if(!all.equal(fitted_mat, w %*% norm_mat2 %*% norm_mat %*% h)){stop('Problemo')}
return(list( exposures = (w %*% norm_mat2), signatures = (norm_mat %*% h) ))
}
normalise_NMF_output(raw_exposure_mat = basis(nmf_deconv_it),
raw_signature_mat = coef(nmf_deconv_it),
fitted_mat = fitted(nmf_deconv_it))
renormalised <- normalise_NMF_output(raw_exposure_mat = basis(nmf_deconv_it),
raw_signature_mat = coef(nmf_deconv_it),
fitted_mat = fitted(nmf_deconv_it))
exposures <- renormalised$exposures
signatures <- renormalised$signatures
exposures
fitted(nmf_deconv_it) == exposures%*%signatures
exposures%*%signatures
fitted(nmf_deconv_it)
all.equal(fitted(nmf_deconv_it), exposures%*%signatures)
##' How to get number of mutations attributed to each mutational signature?
to_deconv
exposures
signatures
signatures[1,]
signatures[1,]
exposures
exposures[1,]
signatures[1,]
exposures[1,]
exposures
exposures[1,1] * signatures[1,]
sum(exposures[1,1] * signatures[1,])
(exposures[1,1] * signatures[1,])
signatures[1,]
##for each of the samples
### for each of the signatures
(exposures[1,1] * signatures[1,])
exposures
exposures
exposures
##for each of the samples
### for each of the signatures
lapply(1:5, function(x) (exposures[1,x] * signatures[x,]))
exposures
# x: for each signature
lapply(1:5, function(x) (exposures[1,x] * signatures[x,]))
# x: for each signature
lapply(1:5, function(x) (Reduce(exposures[1,x] * signatures[x,], '+'))
)
# x: for each signature
lapply(1:5, function(x) (Reduce('+', exposures[1,x] * signatures[x,])))
# x: for each signature
lapply(1:10, function(y) lapply(1:5, function(x) (Reduce('+', exposures[y,x] * signatures[x,]))))
lapply(1:5, function(x) lapply(1:10, function(y) (Reduce('+', exposures[y,x] * signatures[x,]))))
# x: for each signature
# y: for each sample
lapply(1:10, function(y) lapply(1:5, function(x) (Reduce('+', exposures[y,x] * signatures[x,]))))
lapply(1:5, function(x) lapply(1:10, function(y) (Reduce('+', exposures[y,x] * signatures[x,]))))
lapply(1:5, function(x) sum(sapply(1:10, function(y) (Reduce('+', exposures[y,x] * signatures[x,])))))
# x: for each signature
# y: for each sample
lapply(1:10, function(y) sum(sapply(1:5, function(x) (Reduce('+', exposures[y,x] * signatures[x,])))))
lapply(1:5, function(x) sum(sapply(1:10, function(y) (Reduce('+', exposures[y,x] * signatures[x,])))))
# x: for each signature
# y: for each sample
lapply(1:10, function(y) sum(sapply(1:5, function(x) (Reduce('+', exposures[y,x] * signatures[x,])))))
exposures
exposures[1,]
exposures
j=96
i=10
exposures[i,]
signatures[,j]
lapply(1:10, function(i) lapply(1:96, function(j) (sum(exposures[i,] * signatures[,j]))))
lapply(1:10, function(i) sapply(1:96, function(j) (sum(exposures[i,] * signatures[,j]))))
do.call('rbind',
lapply(1:10, function(i) sapply(1:96, function(j) (sum(exposures[i,] * signatures[,j])))))
no_attributable_muts <- do.call('rbind',
lapply(1:10, function(i) sapply(1:96, function(j) (sum(exposures[i,] * signatures[,j])))))
dim(no_attributable_muts)
signatures[,j]
no_attributable_muts <- #do.call('rbind',
lapply(1:10, function(i) lapply(1:5, function(k) sapply(1:96, function(j) (sum(exposures[i,k] * signatures[k,j])))))
no_attributable_muts
no_attributable_muts <- #do.call('rbind',
lapply(1:10, function(i) lapply(1:5, function(k) sum(sapply(1:96, function(j) (sum(exposures[i,k] * signatures[k,j]))))))
no_attributable_muts
no_attributable_muts <- do.call('rbind',
lapply(1:10, function(i) sapply(1:5, function(k) sum(sapply(1:96, function(j) (sum(exposures[i,k] * signatures[k,j]))))))
)
no_attributable_muts
exposures
library(CompSign)
library(CompSign)
# data("Breast560")
metadataBreast560 <- metadata(Breast560)
metadataBreast560
metadataBreast560$final.ER
library(CompSign)
for(i in list.files("../CompSign/data", pattern = "*rda", full.names = TRUE)){load(i)}
dataset <- list(CNA_12K_TCGA=CNA_12K_TCGA,
CNA_12K_TCGA_v2_QP=CNA_12K_TCGA_v2_QP,
CNA_12K_TCGA_v2_YAPSA=CNA_12K_TCGA_v2_YAPSA)
version_dataset <- 'CNA_12K_TCGA_v2_QP'
exposures_tmp <- count_matrix(dataset[[version_dataset]])
exposures_tmp
metadata_tmp <- metadata(dataset[[version_dataset]])
metadata_tmp$project_id
metadata_tmp$project_id == 'TCGA-OV'
exposures_tmp[metadata_tmp$project_id == 'TCGA-OV',]
exp <- exposures_tmp[metadata_tmp$project_id == 'TCGA-OV',]
draw(plotcomputeRho(x = exp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title='CNA TCGA QP dataset - rho'))
library(ComplexHeatmap)
draw(plotcomputeRho(x = exp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title='CNA TCGA QP dataset - rho'))
a <- 1:100
b <- 2:102
c <- 300:201
cbind(a,b,c)
cbind(a,b)
a <- 1:100
b <- 2:103
c <- 300:201
cbind(a,b)
a <- 1:100
b <- 2:101
cbind(a,b)
c <- 300:201
cbind(a,b)
cbind(a,b,c)
all <- cbind(a,b,c)
all <- sweep(all, 1, rowSums(all), '/')
all
plotcomputeRho(x = all, pseudocount =  0,
names_sigs = paste0('s', 1:3),
column_title=' dummy dataset - rho')
all
plotcomputeRho(x = all, pseudocount =  0,
#names_sigs = paste0('s', 1:3),
column_title=' dummy dataset - rho')
plotcomputeRho
x = all
.mat <- computeRhoWrapper(addPseudoCounts(x, pseudocount = pseudocount))
x = all
pseudocount =  0
.mat <- computeRhoWrapper(addPseudoCounts(x, pseudocount = pseudocount))
a <- 1:100
b <- 2:101
c <- 300:201
d <- 400:301
all <- cbind(a,b,c, d)
all <- sweep(all, 1, rowSums(all), '/')
x = all
pseudocount =  0
.mat <- computeRhoWrapper(addPseudoCounts(x, pseudocount = pseudocount))
plotcomputeRho(x = all, pseudocount =  0,
#names_sigs = paste0('s', 1:3),
column_title=' dummy dataset - rho')
plotcomputeRho(x = all, pseudocount =  0,
names_sigs = paste0('s', 1:4),
column_title=' dummy dataset - rho')
a <- 1:100
b <- 2:101
c <- 300:201
d <- 400:301
all <- cbind(a,b,c, d)
all_orig <- all
all <- sweep(all, 1, rowSums(all), '/')
x = all
pseudocount =  0
plotcomputeRho(x = all, pseudocount =  0,
names_sigs = paste0('s', 1:4),
column_title=' dummy dataset - rho')
cor(all_orig)
#' Compute rho and plot the heatmap
plotcomputeRho <- function(x, pseudocount = 0, names_sigs, column_title='', ...){
.mat <- computeRhoWrapper(addPseudoCounts(x, pseudocount = pseudocount))
colnames(.mat) <- rownames(.mat) <- names_sigs
ComplexHeatmap::Heatmap(.mat,  col = circlize::colorRamp2(c(min(.mat), median(.mat), max(.mat)), c("#e6cb1f", "white", "#921fe6")),
column_title = column_title, ...)
}
plotcomputeRho(x = all, pseudocount =  0,
names_sigs = paste0('s', 1:4),
column_title=' dummy dataset - rho', cluster_rows=FALSE, cluster_cols=FALSE)
plotcomputeRho(x = all, pseudocount =  0,
names_sigs = paste0('s', 1:4),
column_title=' dummy dataset - rho', cluster_rows=FALSE, cluster_cols=FALSE)
ComplexHeatmap::Heatmap(.mat,  col = circlize::colorRamp2(c(min(.mat), median(.mat), max(.mat)), c("#e6cb1f", "white", "#921fe6")),
column_title = column_title, ...)
plotcomputeRho(x = all, pseudocount =  0,
names_sigs = paste0('s', 1:4),
column_title=' dummy dataset - rho', cluster_rows=FALSE, cluster_columns=FALSE)
ComplexHeatmap::Heatmap(cor(all_orig))
plotcomputeRho(x = all, pseudocount =  0,
names_sigs = paste0('s', 1:4),
column_title=' dummy dataset - rho', cluster_rows=FALSE, cluster_columns=FALSE)
ComplexHeatmap::Heatmap(cor(all_orig), cluster_rows=FALSE, cluster_columns=FALSE)
pdf("~/Desktop/project_cor.pdf")
for(cancer_type in metadata_tmp$project_id){
print(cancer_type)
exp <- exposures_tmp[metadata_tmp$project_id == cancer_type,]
draw(plotcomputeRho(x = exp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title=paste0('CNA TCGA QP ', cancer_type, ' - rho')))
}
length(metadata_tmp$project_id)
length(unique(metadata_tmp$project_id))
pdf("~/Desktop/project_cor.pdf")
pb <- txtProgressBar(min = 0, max = length(unique(metadata_tmp$project_id)), style = 3)
for(cancer_type_it in 1:length(unique(metadata_tmp$project_id))){
cancer_type <- unique(metadata_tmp$project_id)[cancer_type_it]
print(cancer_type)
exp <- exposures_tmp[metadata_tmp$project_id == cancer_type,]
draw(plotcomputeRho(x = exp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title=paste0('CNA TCGA QP ', cancer_type, ' - rho')))
setTxtProgressBar(pb, i)
}
pb <- txtProgressBar(min = 0, max = length(unique(metadata_tmp$project_id)), style = 3)
for(cancer_type_it in 1:length(unique(metadata_tmp$project_id))){
cancer_type <- unique(metadata_tmp$project_id)[cancer_type_it]
exp <- exposures_tmp[metadata_tmp$project_id == cancer_type,]
draw(plotcomputeRho(x = exp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title=paste0('CNA TCGA QP ', cancer_type, ' - rho')))
setTxtProgressBar(pb, i)
}
dev.off()
dev.off()
dev.off()
dev.off()
pdf("~/Desktop/project_cor.pdf")
pb <- txtProgressBar(min = 0, max = length(unique(metadata_tmp$project_id)), style = 3)
for(cancer_type_it in 1:length(unique(metadata_tmp$project_id))){
cancer_type <- unique(metadata_tmp$project_id)[cancer_type_it]
exp <- exposures_tmp[metadata_tmp$project_id == cancer_type,]
draw(plotcomputeRho(x = exp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title=paste0('CNA TCGA QP ', cancer_type, ' - rho')))
setTxtProgressBar(pb, i)
}
dev.off()
pdf("~/Desktop/project_cor.pdf")
pb <- txtProgressBar(min = 0, max = length(unique(metadata_tmp$project_id)), style = 3)
for(cancer_type_it in 1:length(unique(metadata_tmp$project_id))){
cancer_type <- unique(metadata_tmp$project_id)[cancer_type_it]
exp <- exposures_tmp[metadata_tmp$project_id == cancer_type,]
draw(plotcomputeRho(x = exp, pseudocount =  1e-7,
names_sigs = paste0('s', 1:7),
column_title=paste0('CNA TCGA QP ', cancer_type, ' - rho'), cluster_rows=FALSE, cluster_columns=FALSE))
setTxtProgressBar(pb, i)
}
dev.off()
close(pb)
rm(list=ls())
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
set.seed(1234)
library(DESeq2)
library(ggrepel)
library(colorRamps)
# load exposures and meta data ====
exposures = t(as.matrix(readRDS("../../../data/Robj/ProjectTrajectories/TCGA_SNVexposures_latestCOSMIC.RDS")))         ## all
exposures_int <- t(matrix(sapply(exposures, round), ncol = ncol(exposures), byrow = FALSE))
rownames(exposures_int) <- colnames(exposures)
colnames(exposures_int) <- rownames(exposures)
code <- sapply(colnames(exposures_int), strsplit, split='[.]')
tmp_code_idx <- sapply(code, function(x) which(x == 'TCGA'))
cancer_type <- sapply(1:length(code), function(x) paste0(code[[x]][1:(tmp_code_idx[[x]]-2)],
collapse = '_'))
subset <- cancer_type %in% c('Skin_Melanoma', 'Breast_cancer')
cts <- (exposures_int)[,subset]
dds <- DESeqDataSetFromMatrix(countData = cts,
colData = data.frame(cancer_type=cancer_type[subset]),
design= ~cancer_type)
geoMeans <- apply(cts, 1, function(row) if (all(row == 0)) 0 else exp(mean(log(row[row != 0])))) ## https://support.bioconductor.org/p/62246/#62250
###' Better is to use exp(sum(log(row[row != 0]))/length(row)).
###' This came up through evolving use cases in the phyloseq package by Paul (Joey) McMurdie.
###' I'm now adding this alternate estimator as an official "type" to the
###' estimateSizeFactors function, so that it can be documented.
dds <- estimateSizeFactors(dds, geoMeans=geoMeans)
dds <- DESeq(dds)
resultsNames(dds) # lists the coefficients
res <- results(dds)
# or to shrink log fold changes association with condition:
res <- lfcShrink(dds, coef="cancer_type_Skin_Melanoma_vs_Breast_cancer", type="apeglm")
folderres <- "../../../results/real/SNV_datasets/DESeq_SNV_signatures/"
df_deseq <- cbind.data.frame(totalmut=rowSums(cts),labels=rownames(res),res)
ggplot(df_deseq, aes(x=log2FoldChange, y=-log(pvalue), label=labels))+
geom_point(aes(col=log(totalmut)), size=5)+
geom_label_repel()+
scale_color_gradientn(colours=matlab.like(10))+
ggtitle("Volcano plot of differentially expressed signatures\naccording to DESeq2\n(Melanoma vs skin cancer)")
pvals <- sapply(1:nrow(cts), function(x){
t.test(cts[x,cancer_type[subset] == 'Skin_Melanoma'],
cts[x,cancer_type[subset] == 'Breast_cancer'])$p.value
})
plot(log(df_deseq$pvalue), log(pvals))
aaaa <- MCMCpack::rdirichlet(100, rep(1,4))
df_deseq2_raw <- cbind(deseq2_pvals=log(df_deseq$pvalue), raw_pvals=log(pvals))
ggplot(df_deseq2_raw, aes(x=deseq2_pvals, y=raw_pvals))+ geom_point()
df_deseq2_raw <- cbind.data.frame(deseq2_pvals=log(df_deseq$pvalue), raw_pvals=log(pvals))
ggplot(df_deseq2_raw, aes(x=deseq2_pvals, y=raw_pvals))+ geom_point()
