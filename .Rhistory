# }
return(list(.init, .chain, .emitted))
}
## Example
N <- 100
Ncat <- 96
emisssion_matrix_example <- rdirichlet(n = 1, alpha = rep(1,96))
colnames(emisssion_matrix_example) <- cat_mut
library(arrangements)
## exposure is binary: exposure vs no exposure (hence two hidden states)
createExposure(transition_matrix = matrix(c(0.2, 0.8, 0.1, 0.9), byrow=TRUE),
emission_matrix = matrix(emisssion_matrix_example),
length_out =  1e3,
init_prob = c(0.5, 0.5)
)
transition_matrix
transition_matrix=matrix(c(0.2, 0.8, 0.1, 0.9)
)
emission_matrix
emission_matrix=emisssion_matrix_example
length_out=20
init_prob=c(0.5, 0.54)
init_prob=c(0.5, 0.5)
idx <- c(1,2)
names(idx) <- c(0,1)
.init <- sample(c(0, 1), size = 1, prob = init_prob)
.chain <- rep(NA, length_out)
.chain[1] <- .init
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[idx[.init]])
colnames(emission_matrix)
emission_matrix[idx[.init]]
emission_matrix[idx[.init],]
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[idx[.init],])
.emitted
i
i=2
.chain]
.chain[i-1]
idx
transition_matrix[idx[.chain[i-1]],]
transition_matrix
transition_matrix = matrix(c(0.2, 0.8, 0.1, 0.9), byrow=TRUE, ncol=2)
transition_matrix[idx[.chain[i-1]],]
transition_matrix
init_prob
idx <- c(1,2)
names(idx) <- c(0,1)
.init_idx <- sample(1:length(init_prob), size = 1, prob = init_prob)
.init_idx
.init <- names[.init_idx]
.init_idx
.init <- names(idx)[.init_idx]
.init
.chain_idx <- rep(NA, length_out)
.chain_idx[1] <- .init_idx
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[idx[.init_idx],])
.init_idx
idx
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
emission_matrix[.init_idx,]
emission_matrix
emission_matrix = matrix(c(rep(0, length(Ncat),
emisssion_matrix_example)),
ncol = length(Ncat))
rep(0, length(Ncat)
)
emission_matrix = matrix(c(rep(0, length(Ncat)),
emisssion_matrix_example),
ncol = length(Ncat))
emission_matrix
length(Ncat)
emission_matrix = matrix(c(rep(0, length(Ncat)),
emisssion_matrix_example),
ncol = ncol(Ncat))
emission_matrix = matrix(c(rep(0, length(Ncat)),
emisssion_matrix_example),
ncol = Ncat)
emission_matrixNcat
Ncat
emission_matrix = matrix(c(rep(0, Ncat),
emisssion_matrix_example),
ncol = Ncat)
emission_matrix
emission_matrix = matrix(c(rep(0, Ncat),
emisssion_matrix_example),
byrow = TRUE
ncol = Ncat)
emission_matrix = matrix(c(rep(0, Ncat),
emisssion_matrix_example),
byrow = TRUE,
ncol = Ncat)
emission_matrix
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
.chain_idx
colnames(emission_matrix)
colnames(emisssion_matrix_example) <- cat_mut
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
colnames(emission_matrix)
emission_matrix=emisssion_matrix_example
emisssion_matrix_example
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
colnames(emission_matrix)
.init_idx
emission_matrix
emisssion_matrix_example
emission_matrix = matrix(c(rep(0, Ncat),
emisssion_matrix_example)
byrow = TRUE,
ncol = Ncat)
emission_matrix = matrix(c(rep(0, Ncat),
emisssion_matrix_example),
byrow = TRUE,
ncol = Ncat)
emission_matrix
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
colnames(emission_matrix)
emisssion_matrix_example <- rdirichlet(n = 1, alpha = rep(1,96))
emisssion_matrix_example <- matrix(c(rep(0, Ncat),
emisssion_matrix_example),
byrow = TRUE,
ncol = Ncat)
colnames(emisssion_matrix_example) <- cat_mut
emisssion_matrix_example
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
colnames(emission_matrix)
emission_matrix <- emisssion_matrix_example
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
.emitted
.chain[i-1]
.chain_idx[i-1]
transition_matrix[.chain_idx[i-1],]
idx[.chain_idx[1]]
chain_idx[1]
.chain_idx[1]
.chain[1] <- names(idx)[.chain_idx[1]]
chain_idx[1]
.chain_idx[1]
.chain[1]
transition_matrix[.chain_idx[i-1],]
sample(1:nrow(transition_matrix),
transition_matrix[.chain_idx[i-1],])
1:nrow(transition_matrix)
sample(1:nrow(transition_matrix), 1,
transition_matrix[.chain_idx[i-1],])
sample(1:nrow(transition_matrix), 1,
transition_matrix[.chain_idx[i-1],], FALSE)
xv
sample(1:nrow(transition_matrix), 1, FALSE,
transition_matrix[.chain_idx[i-1],])
.chain_idx[i] <- sample(1:nrow(transition_matrix), 1, FALSE,
transition_matrix[.chain_idx[i-1],])
.chain[i] <- names(idx)[.chain_idx[i]]
.chain
.chain_idx
sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.chain_idx[i],])
idx <- c(1,2)
names(idx) <- c(0,1)
.init_idx <- sample(1:length(init_prob), size = 1, prob = init_prob)
.init <- names(idx)[.init_idx]
.chain_idx <- rep(NA, length_out); .chain <-  rep(NA, length_out)
.chain_idx[1] <- .init_idx
.chain[1] <- names(idx)[.chain_idx[1]]
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
emission_matrix[.init_idx,]
cat_mut
cat_mut <- c(cat_mut, 'None')
Ncat <- length(cat_mut)
Ncat
## Example
N <- 100
Ncat <- length(cat_mut)
emisssion_matrix_example <- rdirichlet(n = 1, alpha = rep(1,Ncat))
emisssion_matrix_example <- matrix(c(rep(0, Ncat-1), 1,
emisssion_matrix_example),
byrow = TRUE,
ncol = Ncat)
colnames(emisssion_matrix_example) <- cat_mut
emission_matrix <- emisssion_matrix_example
emission_matrix
idx <- c(1,2)
names(idx) <- c(0,1)
.init_idx <- sample(1:length(init_prob), size = 1, prob = init_prob)
.init <- names(idx)[.init_idx]
.chain_idx <- rep(NA, length_out); .chain <-  rep(NA, length_out)
.chain_idx[1] <- .init_idx
.chain[1] <- names(idx)[.chain_idx[1]]
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
for(i in 2:length_out){
.chain_idx[i] <- sample(1:nrow(transition_matrix), 1, FALSE,
transition_matrix[.chain_idx[i-1],])
.chain[i] <- names(idx)[.chain_idx[i]]
.emitted[i] <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.chain_idx[i],])
}
.emitted
createExposure <- function(transition_matrix, emission_matrix,
length_out, init_prob){
idx <- c(1,2)
names(idx) <- c(0,1)
.init_idx <- sample(1:length(init_prob), size = 1, prob = init_prob)
.init <- names(idx)[.init_idx]
.chain_idx <- rep(NA, length_out); .chain <-  rep(NA, length_out)
.chain_idx[1] <- .init_idx
.chain[1] <- names(idx)[.chain_idx[1]]
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
for(i in 2:length_out){
.chain_idx[i] <- sample(1:nrow(transition_matrix), 1, FALSE,
transition_matrix[.chain_idx[i-1],])
.chain[i] <- names(idx)[.chain_idx[i]]
.emitted[i] <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.chain_idx[i],])
}
return(list(.init, .chain, .emitted))
}
## exposure is binary: exposure vs no exposure (hence two hidden states)
createExposure(transition_matrix = matrix(c(0.2, 0.8, 0.1, 0.9), byrow=TRUE, ncol=2),
emission_matrix = emisssion_matrix_example,
length_out =  1e3,
init_prob = c(0.5, 0.5)
)
## exposure is binary: exposure vs no exposure (hence two hidden states)
sim_chain <- createExposure(transition_matrix = matrix(c(0.2, 0.8, 0.1, 0.9), byrow=TRUE, ncol=2),
emission_matrix = emisssion_matrix_example,
length_out =  1e3,
init_prob = c(0.5, 0.5)
)
sim_chain
names(sim_chain)
sim_chain]
sim_chain[[1]]
sim_chain[[2]]
createExposure <- function(transition_matrix, emission_matrix,
length_out, init_prob){
idx <- c(1,2)
names(idx) <- c(0,1)
.init_idx <- sample(1:length(init_prob), size = 1, prob = init_prob)
.init <- names(idx)[.init_idx]
.chain_idx <- rep(NA, length_out); .chain <-  rep(NA, length_out)
.chain_idx[1] <- .init_idx
.chain[1] <- names(idx)[.chain_idx[1]]
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
for(i in 2:length_out){
.chain_idx[i] <- sample(1:nrow(transition_matrix), 1, FALSE,
transition_matrix[.chain_idx[i-1],])
.chain[i] <- names(idx)[.chain_idx[i]]
.emitted[i] <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.chain_idx[i],])
}
return(list(.chain, .emitted))
}
## exposure is binary: exposure vs no exposure (hence two hidden states)
sim_chain <- createExposure(transition_matrix = matrix(c(0.2, 0.8, 0.1, 0.9), byrow=TRUE, ncol=2),
emission_matrix = emisssion_matrix_example,
length_out =  1e3,
init_prob = c(0.5, 0.5)
)
createExposure <- function(transition_matrix, emission_matrix,
length_out, init_prob){
idx <- c(1,2)
names(idx) <- c(0,1)
.init_idx <- sample(1:length(init_prob), size = 1, prob = init_prob)
.init <- names(idx)[.init_idx]
.chain_idx <- rep(NA, length_out); .chain <-  rep(NA, length_out)
.chain_idx[1] <- .init_idx
.chain[1] <- names(idx)[.chain_idx[1]]
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
for(i in 2:length_out){
.chain_idx[i] <- sample(1:nrow(transition_matrix), 1, FALSE,
transition_matrix[.chain_idx[i-1],])
.chain[i] <- names(idx)[.chain_idx[i]]
.emitted[i] <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.chain_idx[i],])
}
return(list(hiddenchain=.chain, emitted=.emitted))
}
## exposure is binary: exposure vs no exposure (hence two hidden states)
sim_chain <- createExposure(transition_matrix = matrix(c(0.2, 0.8, 0.1, 0.9), byrow=TRUE, ncol=2),
emission_matrix = emisssion_matrix_example,
length_out =  1e3,
init_prob = c(0.5, 0.5)
)
hist(sim_chain$hiddenchain)
sim_chain$hiddenchain
hist(sim_chain$emitted)
sim_chain$emitted
hist(factor(sim_chain$emitted))
factor(sim_chain$emitted)
table(sim_chain$emitted)
sim_chain$hiddenchain
hist(as.numeric(sim_chain$hiddenchain))
plot(as.numeric(sim_chain$hiddenchain), type='l')
transition_matrix
## graphical model
## the emitted states represent the mutations
## the hidden ones are the exposures
## to do: exposure is a random walk or some non-binary number
rm(list = ls())
library(MCMCpack)
## Mutational categories
library(combinat)
basic_cat <- c('A', 'C', 'G', 'T')
cat_mut <- permutations(x = basic_cat,
k = 3, replace = TRUE)
cat_mut <- cat_mut[1:(nrow(cat_mut)/2),]
cat_mut <- apply(cat_mut, 1, function(x){
tmp <- c()
for(i in basic_cat[!(basic_cat == cat_mut[2])]){
tmp <- rbind(tmp, c(x, i))
}
# apply(tmp, 1, function(x) paste0(x[1:(length(basic_cat)-1)],
#                                   '>', x[basic_cat]))
apply(tmp, 1, function(x) paste0(paste0(x[1:(length(basic_cat)-1)],
collapse = ''),
'>', x[length(basic_cat)]))
})
cat_mut <- sort(unlist(cat_mut))
cat_mut <- c(cat_mut, 'None')
cat_mut
## the exposures are markov chains
setClass("exposure",
representation = representation(
chain="numeric",
length="numeric"
))
createExposure <- function(transition_matrix, emission_matrix,
length_out, init_prob){
idx <- c(1,2)
names(idx) <- c(0,1)
.init_idx <- sample(1:length(init_prob), size = 1, prob = init_prob)
.init <- names(idx)[.init_idx]
.chain_idx <- rep(NA, length_out); .chain <-  rep(NA, length_out)
.chain_idx[1] <- .init_idx
.chain[1] <- names(idx)[.chain_idx[1]]
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
for(i in 2:length_out){
.chain_idx[i] <- sample(1:nrow(transition_matrix), 1, FALSE,
transition_matrix[.chain_idx[i-1],])
.chain[i] <- names(idx)[.chain_idx[i]]
.emitted[i] <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.chain_idx[i],])
}
return(list(hiddenchain=.chain, emitted=.emitted))
}
## Example
N <- 100
Ncat <- length(cat_mut)
emisssion_matrix_example <- rdirichlet(n = 1, alpha = rep(1,Ncat))
emisssion_matrix_example <- matrix(c(rep(0, Ncat-1), 1,
emisssion_matrix_example),
byrow = TRUE,
ncol = Ncat)
colnames(emisssion_matrix_example) <- cat_mut
emission_matrix <- emisssion_matrix_example
library(arrangements)
## exposure is binary: exposure vs no exposure (hence two hidden states)
sim_chain <- createExposure(transition_matrix = matrix(c(0.8, 0.2, 0.1, 0.9), byrow=TRUE, ncol=2),
emission_matrix = emisssion_matrix_example,
length_out =  1e3,
init_prob = c(0.5, 0.5)
)
plot(as.numeric(sim_chain$hiddenchain), type='l')
table(sim_chain$emitted)
#
# mc_object <-
#
# create_mc <-
#
# exposures <-
## graphical model
## the emitted states represent the mutations
## the hidden ones are the exposures
## to do: exposure is a random walk or some non-binary number
rm(list = ls())
library(MCMCpack)
## Mutational categories
library(combinat)
basic_cat <- c('A', 'C', 'G', 'T')
cat_mut <- permutations(x = basic_cat,
k = 3, replace = TRUE)
cat_mut <- cat_mut[1:(nrow(cat_mut)/2),]
cat_mut <- apply(cat_mut, 1, function(x){
tmp <- c()
for(i in basic_cat[!(basic_cat == cat_mut[2])]){
tmp <- rbind(tmp, c(x, i))
}
# apply(tmp, 1, function(x) paste0(x[1:(length(basic_cat)-1)],
#                                   '>', x[basic_cat]))
apply(tmp, 1, function(x) paste0(paste0(x[1:(length(basic_cat)-1)],
collapse = ''),
'>', x[length(basic_cat)]))
})
cat_mut <- sort(unlist(cat_mut))
cat_mut <- c(cat_mut, 'None')
cat_mut
## the exposures are markov chains
setClass("exposure",
representation = representation(
chain="numeric",
length="numeric"
))
createExposure <- function(transition_matrix, emission_matrix,
length_out, init_prob){
idx <- c(1,2)
names(idx) <- c(0,1)
.init_idx <- sample(1:length(init_prob), size = 1, prob = init_prob)
.init <- names(idx)[.init_idx]
.chain_idx <- rep(NA, length_out); .chain <-  rep(NA, length_out)
.chain_idx[1] <- .init_idx
.chain[1] <- names(idx)[.chain_idx[1]]
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
for(i in 2:length_out){
.chain_idx[i] <- sample(1:nrow(transition_matrix), 1, FALSE,
transition_matrix[.chain_idx[i-1],])
.chain[i] <- names(idx)[.chain_idx[i]]
.emitted[i] <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.chain_idx[i],])
}
return(list(hiddenchain=.chain, emitted=.emitted))
}
## Example
N <- 100
Ncat <- length(cat_mut)
emisssion_matrix_example <- rdirichlet(n = 1, alpha = rep(1,Ncat))
emisssion_matrix_example <- matrix(c(rep(0, Ncat-1), 1,
emisssion_matrix_example),
byrow = TRUE,
ncol = Ncat)
colnames(emisssion_matrix_example) <- cat_mut
emission_matrix <- emisssion_matrix_example
library(arrangements)
## exposure is binary: exposure vs no exposure (hence two hidden states)
sim_chain <- createExposure(transition_matrix = matrix(c(0.95, 0.05, 0.1, 0.9), byrow=TRUE, ncol=2),
emission_matrix = emisssion_matrix_example,
length_out =  1e3,
init_prob = c(0.5, 0.5)
)
plot(as.numeric(sim_chain$hiddenchain), type='l')
table(sim_chain$emitted)
#
# mc_object <-
#
# create_mc <-
#
# exposures <-
rpois(1, 5)
rpois(1, 5)
rpois(1, 5)
randomwalk_next <- function(val){
proposal <- val + runif(1, -1, 1)
return(max(0, proposal))
}
createExposureContinuous <- function(transition_matrix, emission_kernel,
length_out, init_val){
## not sure if emission kernel is the right terminology
## here using poisson. change to get(KRNL),
## where KRNL can be e.g. rpois(1, hidden_val)
.chain <- rep(NA, length_out)
.chain[1] <- randomwalk_next(init_val)
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
for(i in 2:length_out){
.chain[i] <- randomwalk_next(.chain[i-1])
.emitted[i] <- rpois(1, .chain[i])
}
return(list(hiddenchain=.chain, emitted=.emitted))
}
transition_matrix
sim_chain_cont_hidden <- createExposureContinuous(transition_matrix = matrix(c(0.95, 0.05, 0.1, 0.9),
byrow=TRUE, ncol=2),
emission_kernel='dummy',
length_out = 100, init_val = 0)
sim_chain_cont_hidden
## not sure if emission kernel is the right terminology
## here using poisson. change to get(KRNL),
## where KRNL can be e.g. rpois(1, hidden_val)
.chain <- rep(NA, length_out)
.chain[1] <- randomwalk_next(init_val)
length_out=20
## not sure if emission kernel is the right terminology
## here using poisson. change to get(KRNL),
## where KRNL can be e.g. rpois(1, hidden_val)
.chain <- rep(NA, length_out)
.chain[1] <- randomwalk_next(init_val)
init_val=0
.chain[1] <- randomwalk_next(init_val)
.emitted <- sample(colnames(emission_matrix), size = 1,
prob = emission_matrix[.init_idx,])
.emitted
emission_matrix
.emitted <- rpois(1, .chain[1])
.emitted
rpois(1, .chain[i])
rpois(1, .chaemission_matrixin[i])
emission_matrix
