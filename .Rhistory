dum_sign
dum_sign
dum_sign
dum_sign
dum_sign@id
setGeneric("id", function(obj, ...) standardGeneric("id"))
setGeneric("id", function(obj, ...) standardGeneric("id"))
setMethod("id", "sign", function(obj, ...)
obj@id)
setGeneric("id<-",
function(object, value) standardGeneric("id<-"))
setReplaceMethod("id",
signature(object="sign",
value="character"),
function(object, value){
object@id <- value
return(object)
})
id(dum_sign) <- "some other id" ##??
setMethod("show",
"sign",
function(object){
cat("Object of class", class(object), "\n")
cat(" Id:", id(object), "\n")
})
dum_sign
q
library(compositions)
library(MCMCpack)
rm(list = ls())
library(MCMCpack)
C <- 3
n <- 1000
### logratio A/B
lg1 <- runif(n)
### logratio B/C
lg2 <- lg1 + rnorm(n, 0, 0.1)
plot(lg1,lg2)
x <- matrix(NA, nrow = n, ncol = C)
x[,1] <- MCMCpack::rdirichlet(n, 1/3)
x[,2] <- x[,1] * lg1
x[,3] <- x[,2] * lg2
head(x)
x <- sweep(x, 1, rowSums(x), '/')
rowSums(x)
idx_rm <- !apply(x < 0, 1, any)
x <- x[idx_rm,]
library(compositions)
?acomp
acomp_x <- acomp(x)
plot(acomp_x, pch=10, cex=0.5)
par(mfrow=c(1,2))
plot(princomp(acomp_x), type='loadings')
plot(princomp(acomp_x), type='biplot')
lin <- lm(ilr(acomp_x)~(lg1[idx_rm]+1))
plot(ilr(acomp_x)[,1], lg1[idx_rm]+1)
par(mfrow=c(1,1))
plot(acomp_x, pch=19, cex=0.5)
plot(ilrInv(lin$fitted.values), col='red', add=TRUE, cex=0.1)
plot(ilrInv(lin$fitted.values), col='red', add=TRUE, cex=0.1)
plot(ilrInv(predict(lin, newdata=list(rdirichlet(1000, c(1,1))))), col='blue', add=TRUE, cex=0.1)
plot(ilrInv(predict(lin, newdata=list(matrix(c(seq(0.001, 0.999, 0.001),
rev(seq(0.001, 0.999, 0.001))),
ncol=2)))),
col='blue', add=TRUE, cex=0.1)
###
par(mfrow=c(1,2))
plot(acomp_x, pch=10, cex=0.5)
plot(mean(acomp_x), pch=10, col='red', add=TRUE)
ellipses(mean(acomp_x), var(acomp_x), col='red', r=1)
ellipses(mean(acomp_x), var(acomp_x), col='red', r=1.5)
ellipses(mean(acomp_x), var(acomp_x), col='red', r=2)
plot(acomp_x, pch=10, cex=0.5)
straight(mean(acomp_x), princomp(acomp_x)$Loadings)
## does the data follow a logistic curve?
dev.off()
par(mfrow=c(1,2))
plot(acomp_x[,1], acomp_x[,2], pch=19, cex=0.1)
plot(acomp_x[,2], acomp_x[,3], pch=19, cex=0.1)
plot(acomp(acomp_x[,1:3]))
par(mfrow=c(1,4))
original <- acomp(MCMCpack::rdirichlet(20, rep(1,3)))
plot(original, main='original')
plot(perturbe(x = original, y = acomp(c(0.1, 0.1, 0.8))),
pch=3, main='peturbation')
plot(original*0.5,
pch=3, main='powering')
plot(original*2.5,
pch=3, main='powering')
a <- matrix(runif(16), 4, 4)
eigen(a)
v1 <- runif(10)
v2 <- runif(10)
v1 %*% v2
sum(v1*v2)
a <- MCMCpack::rdirichlet(1, rep(1,3))
ilr(a)
### Normal distribution on the simplex
par(mfrow=c(1,2))
for(x1 in c(0.3, 1)){
norm_sample <- rnorm.acomp(n = 1000,
mean = c(x1,1,1),
var = matrix(c(0.2,0.1,0.0,
0.1,0.2,0.0,
0.0,0.0,0.2),
byrow=TRUE,nrow=3))
require(scales)
plot(norm_sample, col=alpha('black', 0.1), pch=19)
for(rs in c(0.2, 0.4, 0.75, 1, 1.5)){
ellipses(mean(norm_sample), var(norm_sample),
col='red', r=rs)
}
}
test_equal <- replicate(2, rnorm.acomp(n = 1000,
mean = c(x1,1,1),
var = matrix(c(0.2,0.1,0.0,
0.1,0.2,0.0,
0.0,0.0,0.2),
byrow=TRUE,nrow=3)),
simplify = FALSE)
plot(test_equal[[1]], col=alpha('black', 0.1), pch=19)
plot(test_equal[[2]], col=alpha('black', 0.1), pch=19)
tmp <- MCMCpack::rdirichlet(20, rep(1,5))
colnames(tmp) <- letters[1:ncol(tmp)]
acomp(tmp)
rcomp(tmp)
plot(acomp(tmp))
plot(rcomp(tmp))
plot(sapply(1:100, function(x) det(cov(clr(acomp(MCMCpack::rdirichlet(1, rep(1,x))))))),
type='l')
dist(acomp(tmp[1:2,])) ## how has this been calculated?
dist(clr(acomp(tmp[1:2,])))
sum(clr(acomp(tmp[1:2,]))) ## zero sum of clrs
## Helmert matrix
D=4
helmert <- rbind(rep(1,4),
c(1,-1,rep(0,D-2)))
sum(helmert[1,]*helmert[2,]) ## i.e. orthogonal; inner prod 0
for(j in 3:D){
helmert <- rbind(helmert,
c(rep(1,j-1), 1-j, rep(0, D-j)))
}
helmert
all_ortogonal <- outer(1:nrow(helmert), 1:nrow(helmert),
Vectorize(function(x,y) sum(helmert[x,]*helmert[y,])))
diag(all_ortogonal) <- NA
sum(all_ortogonal, na.rm = TRUE) == 0
contr.helmert(n = 5)
## Similar to Helmert matrix
orthonormal_rows <- function(D){
psi <- matrix(NA, nrow=(D-1), ncol=(D-1))
for(i in 1:(D-1)){
for(j in 1:(D-1)){
if(j <= (D-i)){
psi[i,j] <- sqrt(1/((D-i)*(D-i+1)))
}else if(j == (D-i+1)){
psi[i,j] <- -sqrt((D-i)/(D-i+1))
}else{
psi[i,j] <- 0
}
}
}
return(psi)
}
tmp_nonhelmert <- orthonormal_rows(D = 5)
sum(tmp_nonhelmert[1,]*tmp_nonhelmert[2,])
par(mfrow=c(1,2))
plot(acomp(tmp[,1:4]), pch=4, cex=0.5) ## only subset
plot(ilr(acomp(tmp[,1:4])),
pch=19, col="#00000040", cex=0.6)
pairs(ilr(acomp(tmp[,1:4])),
pch=19, col="#00000040", cex=0.6)
## The first row is dropped
## The first row is dropped
## The second row is proportional to the difference between
## The first row is dropped
## The second row is proportional to the difference between
##     the second variable and the first.
## The first row is dropped
## The second row is proportional to the difference between
##     the second variable and the first.
## The third row is proportional to the difference between the
## The first row is dropped
## The second row is proportional to the difference between
##     the second variable and the first.
## The third row is proportional to the difference between the
##     third variable and the first two.
## The first row is dropped
## The second row is proportional to the difference between
##     the second variable and the first.
## The third row is proportional to the difference between the
##     third variable and the first two.
##  Generally, row j (2{\leq}j{\leq}k) reflects the difference between
## When using PCA with irl, it enables the loadings to be interpreted,
## When using PCA with irl, it enables the loadings to be interpreted,
## at least roughly, in terms of comparisons among the original variables.
## When using PCA with irl, it enables the loadings to be interpreted,
## at least roughly, in terms of comparisons among the original variables.
## When using PCA with irl, it enables the loadings to be interpreted,
## at least roughly, in terms of comparisons among the original variables.
data(SimulatedAmounts)
pc <- princomp(acomp(sa.lognormals5))
pc
summary(pc)
plot(pc)           #plot(pc,type="screeplot")
plot(pc,type="v")
plot(pc,type="biplot")
plot(pc,choice=c(1,3),type="biplot")
plot(pc,type="loadings")
plot(pc,type="loadings",scale.sdev=-1) # Downward
plot(pc,type="relative",scale.sdev=NA) # The directions
plot(pc,type="relative",scale.sdev=1) # one sigma Upward
plot(pc,type="relative",scale.sdev=-1) # one sigma Downward
biplot(pc)
screeplot(pc)
loadings(pc)
relativeLoadings(pc,mult=FALSE)
relativeLoadings(pc)
relativeLoadings(pc,scale.sdev=1)
relativeLoadings(pc,scale.sdev=2)
pc$Loadings
pc$DownLoadings
barplot(pc$Loadings)
pc$sdev^2
cov(predict(pc,sa.lognormals5))
boxplot(1:10, group=c(rep(1,3), rep(2,7)))
boxplot(1:10[as.factor(c(1,1,1,3,3,3,3,3,3,1))])
fctrs = as.factor(c(1,1,1,3,3,3,3,3,3,1))
fctrs = as.factor(c(1,1,1,3,3,3,3,3,3,1))
lapply(levels(fctrs), function(x) 1:10[fctrs == x])
fctrs = as.factor(c(1,1,1,3,3,3,3,3,3,1))
lapply(levels(fctrs), function(x) 1:10[fctrs == x])
fctrs == ftcrs[1]
fctrs == fctrs[1]
length(fctrs)
1:10[fctrs == fctrs[1]]
1:10[which(fctrs == fctrs[1])]
1:10[which(fctrs == fctrs[1])]
1:10[which(fctrs == fctrs[1])]
lapply(levels(fctrs), function(x) (1:10)[fctrs == x])
boxplot(lapply(levels(fctrs), function(x) (1:10)[fctrs == x]))
exposures560BRCA = read.xls(paste0(gitfolder,                  "data/nature17676-s3/Supplementary.Table.21.Signatures.v3.xlsx"),
sheet = 3, header = TRUE, stringsAsFactors=FALSE)
rm(list = ls())
gitfolder <- '/Users/lena/Documents/CantabPhD/CDA_in_Cancer/'
source(file = paste0(gitfolder, "code/functions/extra_functions.R"))
library(compositions)
library(gdata) #dirichlet
library(reshape2)
library(ggplot2)
library(ggplot2)
library(ggthemr)
library(RColorBrewer)
ggthemr('dust')
ggthemr('dust')
n <- 60
n <- 60
qual_col_pals = brewer.pal.info[brewer.pal.info$category == 'qual',]
col_vector = rev(unlist(mapply(brewer.pal, qual_col_pals$maxcolors, rownames(qual_col_pals))))
set_swatch(unique(col_vector))
inp = read.xls(paste0(gitfolder,
"data/nature17676-s3/Supplementary.Table.21.Signatures.v3.xlsx"),
sheet = 2, header = TRUE, stringsAsFactors=FALSE)
inp = read.xls(paste0(gitfolder,
"data/nature17676-s3/Supplementary.Table.21.Signatures.v3.xlsx"),
sheet = 2, header = TRUE, stringsAsFactors=FALSE)
cols_label <- 1:2
cols_prop <- 3:ncol(inp)
for(l in cols_label){
inp[,l] <- sapply(inp[,l], as.character)
}
## Remove percentage sign
for(p in cols_prop){
inp[,p] <- sapply(inp[,p], gsub, patter="%", replacement="")
inp[,p] <- sapply(inp[,p], as.numeric)
}
#colSums(inp[,cols_prop])
#----------------------------#
#   package <compositions>   #
#----------------------------#
acomp_obj <- acomp(X = inp[,cols_prop], total=100)
rcomp_obj <- rcomp(X = inp[,cols_prop], total=100)
plot(acomp(acomp_obj[,1:4]), main='Aitchison space',
pch=1, cex=0.2)
exposures560BRCA = read.xls(paste0(gitfolder,                  "data/nature17676-s3/Supplementary.Table.21.Signatures.v3.xlsx"),
sheet = 3, header = TRUE, stringsAsFactors=FALSE)
exposures560BRCA = read.xls(paste0(gitfolder,                  "data/nature17676-s3/Supplementary.Table.21.Signatures.v3.xlsx"),
sheet = 3, header = TRUE, stringsAsFactors=FALSE)
rownames(exposures560BRCA) <- exposures560BRCA[,1]
exposures560BRCA <- exposures560BRCA[,-1]
exposures560BRCA <- exposures560BRCA[,1:(ncol(exposures560BRCA)-2)]
exposures560BRCA_mat <- as.matrix(exposures560BRCA)
exposures560BRCA_mat <- outer(1:nrow(exposures560BRCA_mat), 1:ncol(exposures560BRCA_mat),
Vectorize(function(x,y) as.numeric(exposures560BRCA_mat[x,y])))
rownames(exposures560BRCA_mat) <- rownames(exposures560BRCA)
colnames(exposures560BRCA_mat) <- colnames(exposures560BRCA)
## normalize colum-wise
exposures560BRCA_norm <- sweep(exposures560BRCA_mat, 2, colSums(exposures560BRCA), '/')
colSums(exposures560BRCA_norm)
## Clinical data
clinical = read.csv("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/nature17676-s3/SupplementaryTable1CLINICAL.PATHOLOGY.DATA.FREEZE.ANALYSIS.v4.032015.csv", header = TRUE, stringsAsFactors=FALSE, skip = 1)
# compositions
join_with_clinical_norm <- cbind(acomp(exposures560BRCA_norm),
clinical[match(clinical$sample_name, rownames(exposures560BRCA_norm)),])
# clr
join_with_clinical <- cbind(clr(acomp((exposures560BRCA_norm))),
clinical[match(clinical$sample_name, rownames(exposures560BRCA_norm)),])
## raw number of mutations
join_with_clinical_raw <- cbind(acomp(exposures560BRCA_mat),
clinical[match(clinical$sample_name, rownames(exposures560BRCA_mat)),])
join_with_clinical_norm
join_with_clinical_norm[,1]
join_with_clinical_norm[,grepl('Signature',colnames(join_with_clinical_norm)]
join_with_clinical_norm[,grepl('Signature',colnames(join_with_clinical_norm))]
rowSums(join_with_clinical_norm[,grepl('Signature',colnames(join_with_clinical_norm))])
join_with_clinical_norm[,grepl('Signature',colnames(join_with_clinical_norm))]
alr(acomp(exposures560BRCA_norm))[,1]
alr(acomp(exposures560BRCA_norm))
exposures560BRCA_mat
## with pseudocount
exposures560BRCA_mat_pc <- exposures560BRCA_mat+1e-5
exposures560BRCA_mat_pc
exposures560BRCA_norm_pc <- sweep(exposures560BRCA_mat_pc, 1, rowSums(exposures560BRCA_mat_pc), '/)
'
)
exposures560BRCA_norm_pc <- sweep(exposures560BRCA_mat_pc, 1, rowSums(exposures560BRCA_mat_pc), '/')
rowSums()
rowSums(exposures560BRCA_norm_pc
)
alr(acomp(exposures560BRCA_norm_pc))
boxplot(lapply(unique(join_with_clinical_norm[,cl]), function(x) (alr(acomp(exposures560BRCA_norm_pc))[,1][join_with_clinical_norm[,cl] == x])))
cl_it <- colnames(join_with_clinical)[!grepl('Signature',colnames(join_with_clinical))]
boxplot(lapply(unique(join_with_clinical_norm[,cl_it[1]]), function(x) (alr(acomp(exposures560BRCA_norm_pc))[,1][join_with_clinical_norm[,cl_it[1]] == x])))
cl_it
unique(join_with_clinical_norm[,cl_it[1]])
boxplot(lapply(unique(join_with_clinical_norm[,cl_it[2]]), function(x)x (alr(acomp(exposures560BRCA_norm_pc))[,1][join_with_clinical_norm[,cl_it[2]] == x])))
unique(join_with_clinical_norm[,cl_it[2]])
boxplot(lapply(unique(join_with_clinical_norm[,cl_it[2]]), function(x) (alr(acomp(exposures560BRCA_norm_pc))[,1][join_with_clinical_norm[,cl_it[2]] == x])))
par(mfrow=c(3,3))
for(cl in cl_it[-1]){
boxplot(lapply(unique(join_with_clinical_norm[,cl_it[cl]]), function(x) (alr(acomp(exposures560BRCA_norm_pc))[,1][join_with_clinical_norm[,cl_it[cl]] == x])))
}
cl_it[-1]
for(cl in cl_it[-1]){
boxplot(lapply(unique(join_with_clinical_norm[,cl_it[cl]]), function(x) (alr(acomp(exposures560BRCA_norm_pc))[,1][join_with_clinical_norm[,cl] == x])))
}
cl_it
unique(join_with_clinical_norm[,cl_it[cl]])
for(cl in cl_it[-1]){
boxplot(lapply(unique(join_with_clinical_norm[,cl]), function(x) (alr(acomp(exposures560BRCA_norm_pc))[,1][join_with_clinical_norm[,cl] == x])))
}
pdf(paste0("exploratory/exploratory560BRCA_2/boxplot.png"),
for(cl in cl_it[-1]){
boxplot(lapply(unique(join_with_clinical_norm[,cl]), function(x) (alr(acomp(exposures560BRCA_norm_pc))[,1][join_with_clinical_norm[,cl] == x])))
}
dev.off()
dev.off()
pdf(paste0("exploratory/exploratory560BRCA_2/boxplot.png"))
for(cl in cl_it[-1]){
boxplot(lapply(unique(join_with_clinical_norm[,cl]), function(x) (alr(acomp(exposures560BRCA_norm_pc))[,1][join_with_clinical_norm[,cl] == x])))
}
dev.off()
setwd(/Users/lena/Documents/CantabPhD/CDA_in_Cancer/code/exploratory)
setwd("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/code/exploratory")
pdf(paste0("exploratory/exploratory560BRCA_2/boxplot.png"))
for(cl in cl_it[-1]){
boxplot(lapply(unique(join_with_clinical_norm[,cl]), function(x) (alr(acomp(exposures560BRCA_norm_pc))[,1][join_with_clinical_norm[,cl] == x])))
}
dev.off()
setwd("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/code")
pdf(paste0("exploratory/exploratory560BRCA_2/boxplot.png"))
for(cl in cl_it[-1]){
boxplot(lapply(unique(join_with_clinical_norm[,cl]), function(x) (alr(acomp(exposures560BRCA_norm_pc))[,1][join_with_clinical_norm[,cl] == x])))
}
dev.off()
library(compositions)      # load library
data(SimulatedAmounts)     # load data sa.lognormals
x <- acomp(sa.lognormals)  # Declare the dataset to be compositional
# and use relative geometry
plot(x)                    # plot.acomp : ternary diagram
ellipses(mean(x),var(x),r=2,col="red")  # Simplex 2sigma predictive region
pr <- princomp(x)
straight(mean(x),pr$Loadings)
x <- rcomp(sa.lognormals)  # Declare the dataset to be compositional
# and use absolute geometry
plot(x)                    # plot.acomp : ternary diagram
ellipses(mean(x),var(x),r=2,col="red")  # Real 2sigma predictive region
pr <- princomp(x)
straight(mean(x),pr$Loadings)
library(compositions)      # load library
data(SimulatedAmounts)     # load data sa.lognormals
x <- acomp(sa.lognormals)  # Declare the dataset to be compositional
# and use relative geometry
plot(x)                    # plot.acomp : ternary diagram
ellipses(mean(x),var(x),r=2,col="red")  # Simplex 2sigma predictive region
pr <- princomp(x)
straight(mean(x),pr$Loadings)
names(x)
head(x)
x[1:3,]
acompmargin(x, name = 'Cu')[1:3,]
acompmargin(x, d = 1)[1:3,]
x[1:3,]
acompmargin(x, d = 1)[1:3,]
mean(x[1:3,])
x[1:3,]
acompmargin(x, d = 1)[1:3,]
data(SimulatedAmounts)
plot.acomp(sa.lognormals5,margin="acomp")
plot.acomp(acompmargin(sa.lognormals5,c("Pb","Zn")))
plot.acomp(acompmargin(sa.lognormals5,c(1,2)))
plot.acomp(sa.lognormals5,margin="acomp")
plot.acomp(acompmargin(sa.lognormals5,c("Pb","Zn")))
plot.acomp(acompmargin(sa.lognormals5,c(1,2)))
plot.acomp(acompmargin(sa.lognormals5,c("Cu","Zn")))
plot.acomp(acompmargin(sa.lognormals5,c(1,2)))
plot.acomp(acompmargin(sa.lognormals5,c("Cu","Zn")))
plot.acomp(acompmargin(sa.lognormals5,c(1,2)))
plot.acomp(acompmargin(sa.lognormals5,c("Pb","Zn")))
plot.acomp(acompmargin(sa.lognormals5,c(1,2)))
original_mat_gen <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/tmp/all_genomes",
stringsAsFactors = FALSE)
names_samples <- original_mat_gen[1,]
sign_emu <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/out/signatures_out/EMu_out/alexv_ftp_genomes/_8_ml_spectra.txt")
assigned <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/out/signatures_out/EMu_out/alexv_ftp_genomes/_8_assigned.txt")
rm(list = ls())
sign_emu <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/out/signatures_out/EMu_out/alexv_ftp_genomes/_8_ml_spectra.txt")
assigned <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/out/signatures_out/EMu_out/alexv_ftp_genomes/_8_assigned.txt")
sign_emu
dim(sign_emu)
dim(assigned)
par(mfrow=c(2,4))
apply(assigned, 2, plot, type='h')
colnames(sign_emu) <- names_samples[-1]
colnames(sign_emu)
library(compositions)
plot(ccomp(t(sign_emu)), pch=19, cex=0.1)
header_genomes <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/tmp/all_genomes",
sep = '\t', fill = TRUE, stringsAsFactors = FALSE)
header_exomes <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/tmp/all_exomes",
sep = '\t', fill = TRUE, stringsAsFactors = FALSE)
header_genomes
rowSums(header_genomes)
header_genomes[1:3,1:3]
sign_emu
rowSums(sign_emu)
plot(ccomp(t(sign_emu)), pch=19, cex=0.1)
sign_emu
dim( v)
dim(sign_emu)
dim(header_genomes)
1034/2
dim9header_exomes
dim(header_exomes)
dim(sign_emu)
sign_emu[1:4,]
plot(ccomp(t(sign_emu)), pch=19, cex=0.1, col=)
sign_emu
original_mat_gen <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/tmp/all_genomes",
stringsAsFactors = FALSE)
original_mat_gen <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/tmp/all_genomes",
stringsAsFactors = FALSE, fill = TRUE)
original_mat_gen
original_mat_gen[1:3,]
original_mat_gen[1:3,1:3]
dim(original_mat_gen)
original_mat_gen[97,1:3]
view(original_mat_gen)
View(original_mat_gen)
dim(sign_emu)
dim(assigned)
## why aren't
dim(sign_emu)
## why aren't
dim(sign_emu)[2]
## and
dim(original_mat_gen)
## and
dim(original_mat_gen)[2]
original_mat_gen_clean <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/tmp/all_genomes_clean",
stringsAsFactors = FALSE, fill = TRUE)
dim(original_mat_gen_clean)
## why aren't
dim(original_mat_gen_clean)[2]
## and
dim(original_mat_gen)[2]
original_mat_gen <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/tmp/all_genomes",
stringsAsFactors = FALSE, fill = TRUE, sep='\t')
dim(original_mat_gen)
original_mat_gen_clean <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/tmp/all_genomes_clean",
stringsAsFactors = FALSE, fill = TRUE, sep=' ')
dim(original_mat_gen_clean)
read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/genomes/Liver/Liver_genomes_mutational_catalog_99_subs_with_indels_and_dinucs.txt")
read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/genomes/Liver/Liver_genomes_mutational_catalog_99_subs_with_indels_and_dinucs.txt", sep = '\t')
dim(read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/genomes/Liver/Liver_genomes_mutational_catalog_99_subs_with_indels_and_dinucs.txt", sep = '\t'))
## why aren't
dim(original_mat_gen_clean)[2]
## and
dim(original_mat_gen)[2]
header_genomes
header_genomes[1,]
as.character(header_genomes[1,])
length(as.character(header_genomes[1,]))
original_mat_gen_clean <- read.table("/Users/lena/Documents/CantabPhD/CDA_in_Cancer/data/ftp.sanger.ac.uk/pub/cancer/AlexandrovEtAl/mutational_catalogs/tmp/all_genomes_clean",
stringsAsFactors = FALSE, fill = FALSE, sep=' ')
## why aren't
dim(original_mat_gen_clean)[2]
## and
dim(original_mat_gen)[2]
data(Activity31)
Activity31
library(roxygen2)
